
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Legends
 * 
 */
export type Legends = $Result.DefaultSelection<Prisma.$LegendsPayload>
/**
 * Model Lore
 * 
 */
export type Lore = $Result.DefaultSelection<Prisma.$LorePayload>
/**
 * Model Status
 * This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
 */
export type Status = $Result.DefaultSelection<Prisma.$StatusPayload>
/**
 * Model Weapons
 * 
 */
export type Weapons = $Result.DefaultSelection<Prisma.$WeaponsPayload>
/**
 * Model code_profiles
 * 
 */
export type code_profiles = $Result.DefaultSelection<Prisma.$code_profilesPayload>
/**
 * Model game
 * 
 */
export type game = $Result.DefaultSelection<Prisma.$gamePayload>
/**
 * Model posts
 * 
 */
export type posts = $Result.DefaultSelection<Prisma.$postsPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Legends
 * const legends = await prisma.legends.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Legends
   * const legends = await prisma.legends.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.legends`: Exposes CRUD operations for the **Legends** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Legends
    * const legends = await prisma.legends.findMany()
    * ```
    */
  get legends(): Prisma.LegendsDelegate<ExtArgs>;

  /**
   * `prisma.lore`: Exposes CRUD operations for the **Lore** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Lores
    * const lores = await prisma.lore.findMany()
    * ```
    */
  get lore(): Prisma.LoreDelegate<ExtArgs>;

  /**
   * `prisma.status`: Exposes CRUD operations for the **Status** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Statuses
    * const statuses = await prisma.status.findMany()
    * ```
    */
  get status(): Prisma.StatusDelegate<ExtArgs>;

  /**
   * `prisma.weapons`: Exposes CRUD operations for the **Weapons** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Weapons
    * const weapons = await prisma.weapons.findMany()
    * ```
    */
  get weapons(): Prisma.WeaponsDelegate<ExtArgs>;

  /**
   * `prisma.code_profiles`: Exposes CRUD operations for the **code_profiles** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Code_profiles
    * const code_profiles = await prisma.code_profiles.findMany()
    * ```
    */
  get code_profiles(): Prisma.code_profilesDelegate<ExtArgs>;

  /**
   * `prisma.game`: Exposes CRUD operations for the **game** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Games
    * const games = await prisma.game.findMany()
    * ```
    */
  get game(): Prisma.gameDelegate<ExtArgs>;

  /**
   * `prisma.posts`: Exposes CRUD operations for the **posts** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Posts
    * const posts = await prisma.posts.findMany()
    * ```
    */
  get posts(): Prisma.postsDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.7.1
   * Query Engine version: 0ca5ccbcfa6bdc81c003cf549abe4269f59c41e5
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Legends: 'Legends',
    Lore: 'Lore',
    Status: 'Status',
    Weapons: 'Weapons',
    code_profiles: 'code_profiles',
    game: 'game',
    posts: 'posts'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'legends' | 'lore' | 'status' | 'weapons' | 'code_profiles' | 'game' | 'posts'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      Legends: {
        payload: Prisma.$LegendsPayload<ExtArgs>
        fields: Prisma.LegendsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LegendsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LegendsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LegendsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LegendsPayload>
          }
          findFirst: {
            args: Prisma.LegendsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LegendsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LegendsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LegendsPayload>
          }
          findMany: {
            args: Prisma.LegendsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LegendsPayload>[]
          }
          create: {
            args: Prisma.LegendsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LegendsPayload>
          }
          createMany: {
            args: Prisma.LegendsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.LegendsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LegendsPayload>
          }
          update: {
            args: Prisma.LegendsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LegendsPayload>
          }
          deleteMany: {
            args: Prisma.LegendsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.LegendsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.LegendsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LegendsPayload>
          }
          aggregate: {
            args: Prisma.LegendsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateLegends>
          }
          groupBy: {
            args: Prisma.LegendsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<LegendsGroupByOutputType>[]
          }
          count: {
            args: Prisma.LegendsCountArgs<ExtArgs>,
            result: $Utils.Optional<LegendsCountAggregateOutputType> | number
          }
        }
      }
      Lore: {
        payload: Prisma.$LorePayload<ExtArgs>
        fields: Prisma.LoreFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LoreFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LorePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LoreFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LorePayload>
          }
          findFirst: {
            args: Prisma.LoreFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LorePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LoreFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LorePayload>
          }
          findMany: {
            args: Prisma.LoreFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LorePayload>[]
          }
          create: {
            args: Prisma.LoreCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LorePayload>
          }
          createMany: {
            args: Prisma.LoreCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.LoreDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LorePayload>
          }
          update: {
            args: Prisma.LoreUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LorePayload>
          }
          deleteMany: {
            args: Prisma.LoreDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.LoreUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.LoreUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LorePayload>
          }
          aggregate: {
            args: Prisma.LoreAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateLore>
          }
          groupBy: {
            args: Prisma.LoreGroupByArgs<ExtArgs>,
            result: $Utils.Optional<LoreGroupByOutputType>[]
          }
          count: {
            args: Prisma.LoreCountArgs<ExtArgs>,
            result: $Utils.Optional<LoreCountAggregateOutputType> | number
          }
        }
      }
      Status: {
        payload: Prisma.$StatusPayload<ExtArgs>
        fields: Prisma.StatusFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StatusFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StatusPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StatusFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StatusPayload>
          }
          findFirst: {
            args: Prisma.StatusFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StatusPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StatusFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StatusPayload>
          }
          findMany: {
            args: Prisma.StatusFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StatusPayload>[]
          }
          create: {
            args: Prisma.StatusCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StatusPayload>
          }
          createMany: {
            args: Prisma.StatusCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.StatusDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StatusPayload>
          }
          update: {
            args: Prisma.StatusUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StatusPayload>
          }
          deleteMany: {
            args: Prisma.StatusDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.StatusUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.StatusUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StatusPayload>
          }
          aggregate: {
            args: Prisma.StatusAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateStatus>
          }
          groupBy: {
            args: Prisma.StatusGroupByArgs<ExtArgs>,
            result: $Utils.Optional<StatusGroupByOutputType>[]
          }
          count: {
            args: Prisma.StatusCountArgs<ExtArgs>,
            result: $Utils.Optional<StatusCountAggregateOutputType> | number
          }
        }
      }
      Weapons: {
        payload: Prisma.$WeaponsPayload<ExtArgs>
        fields: Prisma.WeaponsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WeaponsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WeaponsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WeaponsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WeaponsPayload>
          }
          findFirst: {
            args: Prisma.WeaponsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WeaponsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WeaponsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WeaponsPayload>
          }
          findMany: {
            args: Prisma.WeaponsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WeaponsPayload>[]
          }
          create: {
            args: Prisma.WeaponsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WeaponsPayload>
          }
          createMany: {
            args: Prisma.WeaponsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.WeaponsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WeaponsPayload>
          }
          update: {
            args: Prisma.WeaponsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WeaponsPayload>
          }
          deleteMany: {
            args: Prisma.WeaponsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.WeaponsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.WeaponsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WeaponsPayload>
          }
          aggregate: {
            args: Prisma.WeaponsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateWeapons>
          }
          groupBy: {
            args: Prisma.WeaponsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<WeaponsGroupByOutputType>[]
          }
          count: {
            args: Prisma.WeaponsCountArgs<ExtArgs>,
            result: $Utils.Optional<WeaponsCountAggregateOutputType> | number
          }
        }
      }
      code_profiles: {
        payload: Prisma.$code_profilesPayload<ExtArgs>
        fields: Prisma.code_profilesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.code_profilesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$code_profilesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.code_profilesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$code_profilesPayload>
          }
          findFirst: {
            args: Prisma.code_profilesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$code_profilesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.code_profilesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$code_profilesPayload>
          }
          findMany: {
            args: Prisma.code_profilesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$code_profilesPayload>[]
          }
          create: {
            args: Prisma.code_profilesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$code_profilesPayload>
          }
          createMany: {
            args: Prisma.code_profilesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.code_profilesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$code_profilesPayload>
          }
          update: {
            args: Prisma.code_profilesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$code_profilesPayload>
          }
          deleteMany: {
            args: Prisma.code_profilesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.code_profilesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.code_profilesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$code_profilesPayload>
          }
          aggregate: {
            args: Prisma.Code_profilesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCode_profiles>
          }
          groupBy: {
            args: Prisma.code_profilesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Code_profilesGroupByOutputType>[]
          }
          count: {
            args: Prisma.code_profilesCountArgs<ExtArgs>,
            result: $Utils.Optional<Code_profilesCountAggregateOutputType> | number
          }
        }
      }
      game: {
        payload: Prisma.$gamePayload<ExtArgs>
        fields: Prisma.gameFieldRefs
        operations: {
          findUnique: {
            args: Prisma.gameFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$gamePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.gameFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$gamePayload>
          }
          findFirst: {
            args: Prisma.gameFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$gamePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.gameFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$gamePayload>
          }
          findMany: {
            args: Prisma.gameFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$gamePayload>[]
          }
          create: {
            args: Prisma.gameCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$gamePayload>
          }
          createMany: {
            args: Prisma.gameCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.gameDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$gamePayload>
          }
          update: {
            args: Prisma.gameUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$gamePayload>
          }
          deleteMany: {
            args: Prisma.gameDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.gameUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.gameUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$gamePayload>
          }
          aggregate: {
            args: Prisma.GameAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateGame>
          }
          groupBy: {
            args: Prisma.gameGroupByArgs<ExtArgs>,
            result: $Utils.Optional<GameGroupByOutputType>[]
          }
          count: {
            args: Prisma.gameCountArgs<ExtArgs>,
            result: $Utils.Optional<GameCountAggregateOutputType> | number
          }
        }
      }
      posts: {
        payload: Prisma.$postsPayload<ExtArgs>
        fields: Prisma.postsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.postsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$postsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.postsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$postsPayload>
          }
          findFirst: {
            args: Prisma.postsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$postsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.postsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$postsPayload>
          }
          findMany: {
            args: Prisma.postsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$postsPayload>[]
          }
          create: {
            args: Prisma.postsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$postsPayload>
          }
          createMany: {
            args: Prisma.postsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.postsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$postsPayload>
          }
          update: {
            args: Prisma.postsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$postsPayload>
          }
          deleteMany: {
            args: Prisma.postsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.postsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.postsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$postsPayload>
          }
          aggregate: {
            args: Prisma.PostsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePosts>
          }
          groupBy: {
            args: Prisma.postsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PostsGroupByOutputType>[]
          }
          count: {
            args: Prisma.postsCountArgs<ExtArgs>,
            result: $Utils.Optional<PostsCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type Code_profilesCountOutputType
   */

  export type Code_profilesCountOutputType = {
    posts: number
  }

  export type Code_profilesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    posts?: boolean | Code_profilesCountOutputTypeCountPostsArgs
  }

  // Custom InputTypes

  /**
   * Code_profilesCountOutputType without action
   */
  export type Code_profilesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Code_profilesCountOutputType
     */
    select?: Code_profilesCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * Code_profilesCountOutputType without action
   */
  export type Code_profilesCountOutputTypeCountPostsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: postsWhereInput
  }



  /**
   * Models
   */

  /**
   * Model Legends
   */

  export type AggregateLegends = {
    _count: LegendsCountAggregateOutputType | null
    _avg: LegendsAvgAggregateOutputType | null
    _sum: LegendsSumAggregateOutputType | null
    _min: LegendsMinAggregateOutputType | null
    _max: LegendsMaxAggregateOutputType | null
  }

  export type LegendsAvgAggregateOutputType = {
    id: number | null
    status_id: number | null
    weapon_primary: number | null
    weapon_secondary: number | null
    lore: number | null
    prince: number | null
  }

  export type LegendsSumAggregateOutputType = {
    id: number | null
    status_id: number | null
    weapon_primary: number | null
    weapon_secondary: number | null
    lore: number | null
    prince: number | null
  }

  export type LegendsMinAggregateOutputType = {
    id: number | null
    avatar: string | null
    name: string | null
    status_id: number | null
    weapon_primary: number | null
    weapon_secondary: number | null
    lore: number | null
    prince: number | null
  }

  export type LegendsMaxAggregateOutputType = {
    id: number | null
    avatar: string | null
    name: string | null
    status_id: number | null
    weapon_primary: number | null
    weapon_secondary: number | null
    lore: number | null
    prince: number | null
  }

  export type LegendsCountAggregateOutputType = {
    id: number
    avatar: number
    name: number
    status_id: number
    weapon_primary: number
    weapon_secondary: number
    lore: number
    prince: number
    _all: number
  }


  export type LegendsAvgAggregateInputType = {
    id?: true
    status_id?: true
    weapon_primary?: true
    weapon_secondary?: true
    lore?: true
    prince?: true
  }

  export type LegendsSumAggregateInputType = {
    id?: true
    status_id?: true
    weapon_primary?: true
    weapon_secondary?: true
    lore?: true
    prince?: true
  }

  export type LegendsMinAggregateInputType = {
    id?: true
    avatar?: true
    name?: true
    status_id?: true
    weapon_primary?: true
    weapon_secondary?: true
    lore?: true
    prince?: true
  }

  export type LegendsMaxAggregateInputType = {
    id?: true
    avatar?: true
    name?: true
    status_id?: true
    weapon_primary?: true
    weapon_secondary?: true
    lore?: true
    prince?: true
  }

  export type LegendsCountAggregateInputType = {
    id?: true
    avatar?: true
    name?: true
    status_id?: true
    weapon_primary?: true
    weapon_secondary?: true
    lore?: true
    prince?: true
    _all?: true
  }

  export type LegendsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Legends to aggregate.
     */
    where?: LegendsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Legends to fetch.
     */
    orderBy?: LegendsOrderByWithRelationInput | LegendsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LegendsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Legends from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Legends.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Legends
    **/
    _count?: true | LegendsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LegendsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LegendsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LegendsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LegendsMaxAggregateInputType
  }

  export type GetLegendsAggregateType<T extends LegendsAggregateArgs> = {
        [P in keyof T & keyof AggregateLegends]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLegends[P]>
      : GetScalarType<T[P], AggregateLegends[P]>
  }




  export type LegendsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LegendsWhereInput
    orderBy?: LegendsOrderByWithAggregationInput | LegendsOrderByWithAggregationInput[]
    by: LegendsScalarFieldEnum[] | LegendsScalarFieldEnum
    having?: LegendsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LegendsCountAggregateInputType | true
    _avg?: LegendsAvgAggregateInputType
    _sum?: LegendsSumAggregateInputType
    _min?: LegendsMinAggregateInputType
    _max?: LegendsMaxAggregateInputType
  }

  export type LegendsGroupByOutputType = {
    id: number
    avatar: string
    name: string
    status_id: number | null
    weapon_primary: number | null
    weapon_secondary: number | null
    lore: number | null
    prince: number
    _count: LegendsCountAggregateOutputType | null
    _avg: LegendsAvgAggregateOutputType | null
    _sum: LegendsSumAggregateOutputType | null
    _min: LegendsMinAggregateOutputType | null
    _max: LegendsMaxAggregateOutputType | null
  }

  type GetLegendsGroupByPayload<T extends LegendsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LegendsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LegendsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LegendsGroupByOutputType[P]>
            : GetScalarType<T[P], LegendsGroupByOutputType[P]>
        }
      >
    >


  export type LegendsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    avatar?: boolean
    name?: boolean
    status_id?: boolean
    weapon_primary?: boolean
    weapon_secondary?: boolean
    lore?: boolean
    prince?: boolean
  }, ExtArgs["result"]["legends"]>

  export type LegendsSelectScalar = {
    id?: boolean
    avatar?: boolean
    name?: boolean
    status_id?: boolean
    weapon_primary?: boolean
    weapon_secondary?: boolean
    lore?: boolean
    prince?: boolean
  }


  export type $LegendsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Legends"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      avatar: string
      name: string
      status_id: number | null
      weapon_primary: number | null
      weapon_secondary: number | null
      lore: number | null
      prince: number
    }, ExtArgs["result"]["legends"]>
    composites: {}
  }


  type LegendsGetPayload<S extends boolean | null | undefined | LegendsDefaultArgs> = $Result.GetResult<Prisma.$LegendsPayload, S>

  type LegendsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<LegendsFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: LegendsCountAggregateInputType | true
    }

  export interface LegendsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Legends'], meta: { name: 'Legends' } }
    /**
     * Find zero or one Legends that matches the filter.
     * @param {LegendsFindUniqueArgs} args - Arguments to find a Legends
     * @example
     * // Get one Legends
     * const legends = await prisma.legends.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends LegendsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, LegendsFindUniqueArgs<ExtArgs>>
    ): Prisma__LegendsClient<$Result.GetResult<Prisma.$LegendsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Legends that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {LegendsFindUniqueOrThrowArgs} args - Arguments to find a Legends
     * @example
     * // Get one Legends
     * const legends = await prisma.legends.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends LegendsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, LegendsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__LegendsClient<$Result.GetResult<Prisma.$LegendsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Legends that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LegendsFindFirstArgs} args - Arguments to find a Legends
     * @example
     * // Get one Legends
     * const legends = await prisma.legends.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends LegendsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, LegendsFindFirstArgs<ExtArgs>>
    ): Prisma__LegendsClient<$Result.GetResult<Prisma.$LegendsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Legends that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LegendsFindFirstOrThrowArgs} args - Arguments to find a Legends
     * @example
     * // Get one Legends
     * const legends = await prisma.legends.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends LegendsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, LegendsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__LegendsClient<$Result.GetResult<Prisma.$LegendsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Legends that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LegendsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Legends
     * const legends = await prisma.legends.findMany()
     * 
     * // Get first 10 Legends
     * const legends = await prisma.legends.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const legendsWithIdOnly = await prisma.legends.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends LegendsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LegendsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LegendsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Legends.
     * @param {LegendsCreateArgs} args - Arguments to create a Legends.
     * @example
     * // Create one Legends
     * const Legends = await prisma.legends.create({
     *   data: {
     *     // ... data to create a Legends
     *   }
     * })
     * 
    **/
    create<T extends LegendsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, LegendsCreateArgs<ExtArgs>>
    ): Prisma__LegendsClient<$Result.GetResult<Prisma.$LegendsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Legends.
     *     @param {LegendsCreateManyArgs} args - Arguments to create many Legends.
     *     @example
     *     // Create many Legends
     *     const legends = await prisma.legends.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends LegendsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LegendsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Legends.
     * @param {LegendsDeleteArgs} args - Arguments to delete one Legends.
     * @example
     * // Delete one Legends
     * const Legends = await prisma.legends.delete({
     *   where: {
     *     // ... filter to delete one Legends
     *   }
     * })
     * 
    **/
    delete<T extends LegendsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, LegendsDeleteArgs<ExtArgs>>
    ): Prisma__LegendsClient<$Result.GetResult<Prisma.$LegendsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Legends.
     * @param {LegendsUpdateArgs} args - Arguments to update one Legends.
     * @example
     * // Update one Legends
     * const legends = await prisma.legends.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends LegendsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, LegendsUpdateArgs<ExtArgs>>
    ): Prisma__LegendsClient<$Result.GetResult<Prisma.$LegendsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Legends.
     * @param {LegendsDeleteManyArgs} args - Arguments to filter Legends to delete.
     * @example
     * // Delete a few Legends
     * const { count } = await prisma.legends.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends LegendsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LegendsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Legends.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LegendsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Legends
     * const legends = await prisma.legends.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends LegendsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, LegendsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Legends.
     * @param {LegendsUpsertArgs} args - Arguments to update or create a Legends.
     * @example
     * // Update or create a Legends
     * const legends = await prisma.legends.upsert({
     *   create: {
     *     // ... data to create a Legends
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Legends we want to update
     *   }
     * })
    **/
    upsert<T extends LegendsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, LegendsUpsertArgs<ExtArgs>>
    ): Prisma__LegendsClient<$Result.GetResult<Prisma.$LegendsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Legends.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LegendsCountArgs} args - Arguments to filter Legends to count.
     * @example
     * // Count the number of Legends
     * const count = await prisma.legends.count({
     *   where: {
     *     // ... the filter for the Legends we want to count
     *   }
     * })
    **/
    count<T extends LegendsCountArgs>(
      args?: Subset<T, LegendsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LegendsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Legends.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LegendsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LegendsAggregateArgs>(args: Subset<T, LegendsAggregateArgs>): Prisma.PrismaPromise<GetLegendsAggregateType<T>>

    /**
     * Group by Legends.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LegendsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LegendsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LegendsGroupByArgs['orderBy'] }
        : { orderBy?: LegendsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LegendsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLegendsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Legends model
   */
  readonly fields: LegendsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Legends.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LegendsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Legends model
   */ 
  interface LegendsFieldRefs {
    readonly id: FieldRef<"Legends", 'Int'>
    readonly avatar: FieldRef<"Legends", 'String'>
    readonly name: FieldRef<"Legends", 'String'>
    readonly status_id: FieldRef<"Legends", 'Int'>
    readonly weapon_primary: FieldRef<"Legends", 'Int'>
    readonly weapon_secondary: FieldRef<"Legends", 'Int'>
    readonly lore: FieldRef<"Legends", 'Int'>
    readonly prince: FieldRef<"Legends", 'Float'>
  }
    

  // Custom InputTypes

  /**
   * Legends findUnique
   */
  export type LegendsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Legends
     */
    select?: LegendsSelect<ExtArgs> | null
    /**
     * Filter, which Legends to fetch.
     */
    where: LegendsWhereUniqueInput
  }


  /**
   * Legends findUniqueOrThrow
   */
  export type LegendsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Legends
     */
    select?: LegendsSelect<ExtArgs> | null
    /**
     * Filter, which Legends to fetch.
     */
    where: LegendsWhereUniqueInput
  }


  /**
   * Legends findFirst
   */
  export type LegendsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Legends
     */
    select?: LegendsSelect<ExtArgs> | null
    /**
     * Filter, which Legends to fetch.
     */
    where?: LegendsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Legends to fetch.
     */
    orderBy?: LegendsOrderByWithRelationInput | LegendsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Legends.
     */
    cursor?: LegendsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Legends from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Legends.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Legends.
     */
    distinct?: LegendsScalarFieldEnum | LegendsScalarFieldEnum[]
  }


  /**
   * Legends findFirstOrThrow
   */
  export type LegendsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Legends
     */
    select?: LegendsSelect<ExtArgs> | null
    /**
     * Filter, which Legends to fetch.
     */
    where?: LegendsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Legends to fetch.
     */
    orderBy?: LegendsOrderByWithRelationInput | LegendsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Legends.
     */
    cursor?: LegendsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Legends from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Legends.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Legends.
     */
    distinct?: LegendsScalarFieldEnum | LegendsScalarFieldEnum[]
  }


  /**
   * Legends findMany
   */
  export type LegendsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Legends
     */
    select?: LegendsSelect<ExtArgs> | null
    /**
     * Filter, which Legends to fetch.
     */
    where?: LegendsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Legends to fetch.
     */
    orderBy?: LegendsOrderByWithRelationInput | LegendsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Legends.
     */
    cursor?: LegendsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Legends from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Legends.
     */
    skip?: number
    distinct?: LegendsScalarFieldEnum | LegendsScalarFieldEnum[]
  }


  /**
   * Legends create
   */
  export type LegendsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Legends
     */
    select?: LegendsSelect<ExtArgs> | null
    /**
     * The data needed to create a Legends.
     */
    data: XOR<LegendsCreateInput, LegendsUncheckedCreateInput>
  }


  /**
   * Legends createMany
   */
  export type LegendsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Legends.
     */
    data: LegendsCreateManyInput | LegendsCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Legends update
   */
  export type LegendsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Legends
     */
    select?: LegendsSelect<ExtArgs> | null
    /**
     * The data needed to update a Legends.
     */
    data: XOR<LegendsUpdateInput, LegendsUncheckedUpdateInput>
    /**
     * Choose, which Legends to update.
     */
    where: LegendsWhereUniqueInput
  }


  /**
   * Legends updateMany
   */
  export type LegendsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Legends.
     */
    data: XOR<LegendsUpdateManyMutationInput, LegendsUncheckedUpdateManyInput>
    /**
     * Filter which Legends to update
     */
    where?: LegendsWhereInput
  }


  /**
   * Legends upsert
   */
  export type LegendsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Legends
     */
    select?: LegendsSelect<ExtArgs> | null
    /**
     * The filter to search for the Legends to update in case it exists.
     */
    where: LegendsWhereUniqueInput
    /**
     * In case the Legends found by the `where` argument doesn't exist, create a new Legends with this data.
     */
    create: XOR<LegendsCreateInput, LegendsUncheckedCreateInput>
    /**
     * In case the Legends was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LegendsUpdateInput, LegendsUncheckedUpdateInput>
  }


  /**
   * Legends delete
   */
  export type LegendsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Legends
     */
    select?: LegendsSelect<ExtArgs> | null
    /**
     * Filter which Legends to delete.
     */
    where: LegendsWhereUniqueInput
  }


  /**
   * Legends deleteMany
   */
  export type LegendsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Legends to delete
     */
    where?: LegendsWhereInput
  }


  /**
   * Legends without action
   */
  export type LegendsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Legends
     */
    select?: LegendsSelect<ExtArgs> | null
  }



  /**
   * Model Lore
   */

  export type AggregateLore = {
    _count: LoreCountAggregateOutputType | null
    _avg: LoreAvgAggregateOutputType | null
    _sum: LoreSumAggregateOutputType | null
    _min: LoreMinAggregateOutputType | null
    _max: LoreMaxAggregateOutputType | null
  }

  export type LoreAvgAggregateOutputType = {
    id: number | null
  }

  export type LoreSumAggregateOutputType = {
    id: number | null
  }

  export type LoreMinAggregateOutputType = {
    id: number | null
  }

  export type LoreMaxAggregateOutputType = {
    id: number | null
  }

  export type LoreCountAggregateOutputType = {
    id: number
    paragraphs: number
    _all: number
  }


  export type LoreAvgAggregateInputType = {
    id?: true
  }

  export type LoreSumAggregateInputType = {
    id?: true
  }

  export type LoreMinAggregateInputType = {
    id?: true
  }

  export type LoreMaxAggregateInputType = {
    id?: true
  }

  export type LoreCountAggregateInputType = {
    id?: true
    paragraphs?: true
    _all?: true
  }

  export type LoreAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Lore to aggregate.
     */
    where?: LoreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lores to fetch.
     */
    orderBy?: LoreOrderByWithRelationInput | LoreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LoreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Lores
    **/
    _count?: true | LoreCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LoreAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LoreSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LoreMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LoreMaxAggregateInputType
  }

  export type GetLoreAggregateType<T extends LoreAggregateArgs> = {
        [P in keyof T & keyof AggregateLore]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLore[P]>
      : GetScalarType<T[P], AggregateLore[P]>
  }




  export type LoreGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LoreWhereInput
    orderBy?: LoreOrderByWithAggregationInput | LoreOrderByWithAggregationInput[]
    by: LoreScalarFieldEnum[] | LoreScalarFieldEnum
    having?: LoreScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LoreCountAggregateInputType | true
    _avg?: LoreAvgAggregateInputType
    _sum?: LoreSumAggregateInputType
    _min?: LoreMinAggregateInputType
    _max?: LoreMaxAggregateInputType
  }

  export type LoreGroupByOutputType = {
    id: number
    paragraphs: string[]
    _count: LoreCountAggregateOutputType | null
    _avg: LoreAvgAggregateOutputType | null
    _sum: LoreSumAggregateOutputType | null
    _min: LoreMinAggregateOutputType | null
    _max: LoreMaxAggregateOutputType | null
  }

  type GetLoreGroupByPayload<T extends LoreGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LoreGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LoreGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LoreGroupByOutputType[P]>
            : GetScalarType<T[P], LoreGroupByOutputType[P]>
        }
      >
    >


  export type LoreSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    paragraphs?: boolean
  }, ExtArgs["result"]["lore"]>

  export type LoreSelectScalar = {
    id?: boolean
    paragraphs?: boolean
  }


  export type $LorePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Lore"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      paragraphs: string[]
    }, ExtArgs["result"]["lore"]>
    composites: {}
  }


  type LoreGetPayload<S extends boolean | null | undefined | LoreDefaultArgs> = $Result.GetResult<Prisma.$LorePayload, S>

  type LoreCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<LoreFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: LoreCountAggregateInputType | true
    }

  export interface LoreDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Lore'], meta: { name: 'Lore' } }
    /**
     * Find zero or one Lore that matches the filter.
     * @param {LoreFindUniqueArgs} args - Arguments to find a Lore
     * @example
     * // Get one Lore
     * const lore = await prisma.lore.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends LoreFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, LoreFindUniqueArgs<ExtArgs>>
    ): Prisma__LoreClient<$Result.GetResult<Prisma.$LorePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Lore that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {LoreFindUniqueOrThrowArgs} args - Arguments to find a Lore
     * @example
     * // Get one Lore
     * const lore = await prisma.lore.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends LoreFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, LoreFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__LoreClient<$Result.GetResult<Prisma.$LorePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Lore that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoreFindFirstArgs} args - Arguments to find a Lore
     * @example
     * // Get one Lore
     * const lore = await prisma.lore.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends LoreFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, LoreFindFirstArgs<ExtArgs>>
    ): Prisma__LoreClient<$Result.GetResult<Prisma.$LorePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Lore that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoreFindFirstOrThrowArgs} args - Arguments to find a Lore
     * @example
     * // Get one Lore
     * const lore = await prisma.lore.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends LoreFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, LoreFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__LoreClient<$Result.GetResult<Prisma.$LorePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Lores that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoreFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Lores
     * const lores = await prisma.lore.findMany()
     * 
     * // Get first 10 Lores
     * const lores = await prisma.lore.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const loreWithIdOnly = await prisma.lore.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends LoreFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LoreFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LorePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Lore.
     * @param {LoreCreateArgs} args - Arguments to create a Lore.
     * @example
     * // Create one Lore
     * const Lore = await prisma.lore.create({
     *   data: {
     *     // ... data to create a Lore
     *   }
     * })
     * 
    **/
    create<T extends LoreCreateArgs<ExtArgs>>(
      args: SelectSubset<T, LoreCreateArgs<ExtArgs>>
    ): Prisma__LoreClient<$Result.GetResult<Prisma.$LorePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Lores.
     *     @param {LoreCreateManyArgs} args - Arguments to create many Lores.
     *     @example
     *     // Create many Lores
     *     const lore = await prisma.lore.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends LoreCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LoreCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Lore.
     * @param {LoreDeleteArgs} args - Arguments to delete one Lore.
     * @example
     * // Delete one Lore
     * const Lore = await prisma.lore.delete({
     *   where: {
     *     // ... filter to delete one Lore
     *   }
     * })
     * 
    **/
    delete<T extends LoreDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, LoreDeleteArgs<ExtArgs>>
    ): Prisma__LoreClient<$Result.GetResult<Prisma.$LorePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Lore.
     * @param {LoreUpdateArgs} args - Arguments to update one Lore.
     * @example
     * // Update one Lore
     * const lore = await prisma.lore.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends LoreUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, LoreUpdateArgs<ExtArgs>>
    ): Prisma__LoreClient<$Result.GetResult<Prisma.$LorePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Lores.
     * @param {LoreDeleteManyArgs} args - Arguments to filter Lores to delete.
     * @example
     * // Delete a few Lores
     * const { count } = await prisma.lore.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends LoreDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LoreDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Lores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoreUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Lores
     * const lore = await prisma.lore.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends LoreUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, LoreUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Lore.
     * @param {LoreUpsertArgs} args - Arguments to update or create a Lore.
     * @example
     * // Update or create a Lore
     * const lore = await prisma.lore.upsert({
     *   create: {
     *     // ... data to create a Lore
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Lore we want to update
     *   }
     * })
    **/
    upsert<T extends LoreUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, LoreUpsertArgs<ExtArgs>>
    ): Prisma__LoreClient<$Result.GetResult<Prisma.$LorePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Lores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoreCountArgs} args - Arguments to filter Lores to count.
     * @example
     * // Count the number of Lores
     * const count = await prisma.lore.count({
     *   where: {
     *     // ... the filter for the Lores we want to count
     *   }
     * })
    **/
    count<T extends LoreCountArgs>(
      args?: Subset<T, LoreCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LoreCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Lore.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoreAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LoreAggregateArgs>(args: Subset<T, LoreAggregateArgs>): Prisma.PrismaPromise<GetLoreAggregateType<T>>

    /**
     * Group by Lore.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoreGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LoreGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LoreGroupByArgs['orderBy'] }
        : { orderBy?: LoreGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LoreGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLoreGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Lore model
   */
  readonly fields: LoreFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Lore.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LoreClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Lore model
   */ 
  interface LoreFieldRefs {
    readonly id: FieldRef<"Lore", 'Int'>
    readonly paragraphs: FieldRef<"Lore", 'String[]'>
  }
    

  // Custom InputTypes

  /**
   * Lore findUnique
   */
  export type LoreFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lore
     */
    select?: LoreSelect<ExtArgs> | null
    /**
     * Filter, which Lore to fetch.
     */
    where: LoreWhereUniqueInput
  }


  /**
   * Lore findUniqueOrThrow
   */
  export type LoreFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lore
     */
    select?: LoreSelect<ExtArgs> | null
    /**
     * Filter, which Lore to fetch.
     */
    where: LoreWhereUniqueInput
  }


  /**
   * Lore findFirst
   */
  export type LoreFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lore
     */
    select?: LoreSelect<ExtArgs> | null
    /**
     * Filter, which Lore to fetch.
     */
    where?: LoreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lores to fetch.
     */
    orderBy?: LoreOrderByWithRelationInput | LoreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Lores.
     */
    cursor?: LoreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Lores.
     */
    distinct?: LoreScalarFieldEnum | LoreScalarFieldEnum[]
  }


  /**
   * Lore findFirstOrThrow
   */
  export type LoreFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lore
     */
    select?: LoreSelect<ExtArgs> | null
    /**
     * Filter, which Lore to fetch.
     */
    where?: LoreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lores to fetch.
     */
    orderBy?: LoreOrderByWithRelationInput | LoreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Lores.
     */
    cursor?: LoreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Lores.
     */
    distinct?: LoreScalarFieldEnum | LoreScalarFieldEnum[]
  }


  /**
   * Lore findMany
   */
  export type LoreFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lore
     */
    select?: LoreSelect<ExtArgs> | null
    /**
     * Filter, which Lores to fetch.
     */
    where?: LoreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lores to fetch.
     */
    orderBy?: LoreOrderByWithRelationInput | LoreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Lores.
     */
    cursor?: LoreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lores.
     */
    skip?: number
    distinct?: LoreScalarFieldEnum | LoreScalarFieldEnum[]
  }


  /**
   * Lore create
   */
  export type LoreCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lore
     */
    select?: LoreSelect<ExtArgs> | null
    /**
     * The data needed to create a Lore.
     */
    data?: XOR<LoreCreateInput, LoreUncheckedCreateInput>
  }


  /**
   * Lore createMany
   */
  export type LoreCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Lores.
     */
    data: LoreCreateManyInput | LoreCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Lore update
   */
  export type LoreUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lore
     */
    select?: LoreSelect<ExtArgs> | null
    /**
     * The data needed to update a Lore.
     */
    data: XOR<LoreUpdateInput, LoreUncheckedUpdateInput>
    /**
     * Choose, which Lore to update.
     */
    where: LoreWhereUniqueInput
  }


  /**
   * Lore updateMany
   */
  export type LoreUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Lores.
     */
    data: XOR<LoreUpdateManyMutationInput, LoreUncheckedUpdateManyInput>
    /**
     * Filter which Lores to update
     */
    where?: LoreWhereInput
  }


  /**
   * Lore upsert
   */
  export type LoreUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lore
     */
    select?: LoreSelect<ExtArgs> | null
    /**
     * The filter to search for the Lore to update in case it exists.
     */
    where: LoreWhereUniqueInput
    /**
     * In case the Lore found by the `where` argument doesn't exist, create a new Lore with this data.
     */
    create: XOR<LoreCreateInput, LoreUncheckedCreateInput>
    /**
     * In case the Lore was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LoreUpdateInput, LoreUncheckedUpdateInput>
  }


  /**
   * Lore delete
   */
  export type LoreDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lore
     */
    select?: LoreSelect<ExtArgs> | null
    /**
     * Filter which Lore to delete.
     */
    where: LoreWhereUniqueInput
  }


  /**
   * Lore deleteMany
   */
  export type LoreDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Lores to delete
     */
    where?: LoreWhereInput
  }


  /**
   * Lore without action
   */
  export type LoreDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lore
     */
    select?: LoreSelect<ExtArgs> | null
  }



  /**
   * Model Status
   */

  export type AggregateStatus = {
    _count: StatusCountAggregateOutputType | null
    _avg: StatusAvgAggregateOutputType | null
    _sum: StatusSumAggregateOutputType | null
    _min: StatusMinAggregateOutputType | null
    _max: StatusMaxAggregateOutputType | null
  }

  export type StatusAvgAggregateOutputType = {
    id: number | null
    force: number | null
    dex: number | null
    def: number | null
    spd: number | null
  }

  export type StatusSumAggregateOutputType = {
    id: number | null
    force: number | null
    dex: number | null
    def: number | null
    spd: number | null
  }

  export type StatusMinAggregateOutputType = {
    id: number | null
    force: number | null
    dex: number | null
    def: number | null
    spd: number | null
  }

  export type StatusMaxAggregateOutputType = {
    id: number | null
    force: number | null
    dex: number | null
    def: number | null
    spd: number | null
  }

  export type StatusCountAggregateOutputType = {
    id: number
    force: number
    dex: number
    def: number
    spd: number
    _all: number
  }


  export type StatusAvgAggregateInputType = {
    id?: true
    force?: true
    dex?: true
    def?: true
    spd?: true
  }

  export type StatusSumAggregateInputType = {
    id?: true
    force?: true
    dex?: true
    def?: true
    spd?: true
  }

  export type StatusMinAggregateInputType = {
    id?: true
    force?: true
    dex?: true
    def?: true
    spd?: true
  }

  export type StatusMaxAggregateInputType = {
    id?: true
    force?: true
    dex?: true
    def?: true
    spd?: true
  }

  export type StatusCountAggregateInputType = {
    id?: true
    force?: true
    dex?: true
    def?: true
    spd?: true
    _all?: true
  }

  export type StatusAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Status to aggregate.
     */
    where?: StatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Statuses to fetch.
     */
    orderBy?: StatusOrderByWithRelationInput | StatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Statuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Statuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Statuses
    **/
    _count?: true | StatusCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StatusAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StatusSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StatusMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StatusMaxAggregateInputType
  }

  export type GetStatusAggregateType<T extends StatusAggregateArgs> = {
        [P in keyof T & keyof AggregateStatus]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStatus[P]>
      : GetScalarType<T[P], AggregateStatus[P]>
  }




  export type StatusGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StatusWhereInput
    orderBy?: StatusOrderByWithAggregationInput | StatusOrderByWithAggregationInput[]
    by: StatusScalarFieldEnum[] | StatusScalarFieldEnum
    having?: StatusScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StatusCountAggregateInputType | true
    _avg?: StatusAvgAggregateInputType
    _sum?: StatusSumAggregateInputType
    _min?: StatusMinAggregateInputType
    _max?: StatusMaxAggregateInputType
  }

  export type StatusGroupByOutputType = {
    id: number
    force: number
    dex: number
    def: number
    spd: number
    _count: StatusCountAggregateOutputType | null
    _avg: StatusAvgAggregateOutputType | null
    _sum: StatusSumAggregateOutputType | null
    _min: StatusMinAggregateOutputType | null
    _max: StatusMaxAggregateOutputType | null
  }

  type GetStatusGroupByPayload<T extends StatusGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StatusGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StatusGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StatusGroupByOutputType[P]>
            : GetScalarType<T[P], StatusGroupByOutputType[P]>
        }
      >
    >


  export type StatusSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    force?: boolean
    dex?: boolean
    def?: boolean
    spd?: boolean
  }, ExtArgs["result"]["status"]>

  export type StatusSelectScalar = {
    id?: boolean
    force?: boolean
    dex?: boolean
    def?: boolean
    spd?: boolean
  }


  export type $StatusPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Status"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      force: number
      dex: number
      def: number
      spd: number
    }, ExtArgs["result"]["status"]>
    composites: {}
  }


  type StatusGetPayload<S extends boolean | null | undefined | StatusDefaultArgs> = $Result.GetResult<Prisma.$StatusPayload, S>

  type StatusCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<StatusFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: StatusCountAggregateInputType | true
    }

  export interface StatusDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Status'], meta: { name: 'Status' } }
    /**
     * Find zero or one Status that matches the filter.
     * @param {StatusFindUniqueArgs} args - Arguments to find a Status
     * @example
     * // Get one Status
     * const status = await prisma.status.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends StatusFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, StatusFindUniqueArgs<ExtArgs>>
    ): Prisma__StatusClient<$Result.GetResult<Prisma.$StatusPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Status that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {StatusFindUniqueOrThrowArgs} args - Arguments to find a Status
     * @example
     * // Get one Status
     * const status = await prisma.status.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends StatusFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, StatusFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__StatusClient<$Result.GetResult<Prisma.$StatusPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Status that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusFindFirstArgs} args - Arguments to find a Status
     * @example
     * // Get one Status
     * const status = await prisma.status.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends StatusFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, StatusFindFirstArgs<ExtArgs>>
    ): Prisma__StatusClient<$Result.GetResult<Prisma.$StatusPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Status that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusFindFirstOrThrowArgs} args - Arguments to find a Status
     * @example
     * // Get one Status
     * const status = await prisma.status.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends StatusFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, StatusFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__StatusClient<$Result.GetResult<Prisma.$StatusPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Statuses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Statuses
     * const statuses = await prisma.status.findMany()
     * 
     * // Get first 10 Statuses
     * const statuses = await prisma.status.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const statusWithIdOnly = await prisma.status.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends StatusFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StatusFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StatusPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Status.
     * @param {StatusCreateArgs} args - Arguments to create a Status.
     * @example
     * // Create one Status
     * const Status = await prisma.status.create({
     *   data: {
     *     // ... data to create a Status
     *   }
     * })
     * 
    **/
    create<T extends StatusCreateArgs<ExtArgs>>(
      args: SelectSubset<T, StatusCreateArgs<ExtArgs>>
    ): Prisma__StatusClient<$Result.GetResult<Prisma.$StatusPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Statuses.
     *     @param {StatusCreateManyArgs} args - Arguments to create many Statuses.
     *     @example
     *     // Create many Statuses
     *     const status = await prisma.status.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends StatusCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StatusCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Status.
     * @param {StatusDeleteArgs} args - Arguments to delete one Status.
     * @example
     * // Delete one Status
     * const Status = await prisma.status.delete({
     *   where: {
     *     // ... filter to delete one Status
     *   }
     * })
     * 
    **/
    delete<T extends StatusDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, StatusDeleteArgs<ExtArgs>>
    ): Prisma__StatusClient<$Result.GetResult<Prisma.$StatusPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Status.
     * @param {StatusUpdateArgs} args - Arguments to update one Status.
     * @example
     * // Update one Status
     * const status = await prisma.status.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends StatusUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, StatusUpdateArgs<ExtArgs>>
    ): Prisma__StatusClient<$Result.GetResult<Prisma.$StatusPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Statuses.
     * @param {StatusDeleteManyArgs} args - Arguments to filter Statuses to delete.
     * @example
     * // Delete a few Statuses
     * const { count } = await prisma.status.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends StatusDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StatusDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Statuses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Statuses
     * const status = await prisma.status.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends StatusUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, StatusUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Status.
     * @param {StatusUpsertArgs} args - Arguments to update or create a Status.
     * @example
     * // Update or create a Status
     * const status = await prisma.status.upsert({
     *   create: {
     *     // ... data to create a Status
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Status we want to update
     *   }
     * })
    **/
    upsert<T extends StatusUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, StatusUpsertArgs<ExtArgs>>
    ): Prisma__StatusClient<$Result.GetResult<Prisma.$StatusPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Statuses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusCountArgs} args - Arguments to filter Statuses to count.
     * @example
     * // Count the number of Statuses
     * const count = await prisma.status.count({
     *   where: {
     *     // ... the filter for the Statuses we want to count
     *   }
     * })
    **/
    count<T extends StatusCountArgs>(
      args?: Subset<T, StatusCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StatusCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Status.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StatusAggregateArgs>(args: Subset<T, StatusAggregateArgs>): Prisma.PrismaPromise<GetStatusAggregateType<T>>

    /**
     * Group by Status.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StatusGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StatusGroupByArgs['orderBy'] }
        : { orderBy?: StatusGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StatusGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStatusGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Status model
   */
  readonly fields: StatusFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Status.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StatusClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Status model
   */ 
  interface StatusFieldRefs {
    readonly id: FieldRef<"Status", 'Int'>
    readonly force: FieldRef<"Status", 'Int'>
    readonly dex: FieldRef<"Status", 'Int'>
    readonly def: FieldRef<"Status", 'Int'>
    readonly spd: FieldRef<"Status", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Status findUnique
   */
  export type StatusFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Status
     */
    select?: StatusSelect<ExtArgs> | null
    /**
     * Filter, which Status to fetch.
     */
    where: StatusWhereUniqueInput
  }


  /**
   * Status findUniqueOrThrow
   */
  export type StatusFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Status
     */
    select?: StatusSelect<ExtArgs> | null
    /**
     * Filter, which Status to fetch.
     */
    where: StatusWhereUniqueInput
  }


  /**
   * Status findFirst
   */
  export type StatusFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Status
     */
    select?: StatusSelect<ExtArgs> | null
    /**
     * Filter, which Status to fetch.
     */
    where?: StatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Statuses to fetch.
     */
    orderBy?: StatusOrderByWithRelationInput | StatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Statuses.
     */
    cursor?: StatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Statuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Statuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Statuses.
     */
    distinct?: StatusScalarFieldEnum | StatusScalarFieldEnum[]
  }


  /**
   * Status findFirstOrThrow
   */
  export type StatusFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Status
     */
    select?: StatusSelect<ExtArgs> | null
    /**
     * Filter, which Status to fetch.
     */
    where?: StatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Statuses to fetch.
     */
    orderBy?: StatusOrderByWithRelationInput | StatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Statuses.
     */
    cursor?: StatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Statuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Statuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Statuses.
     */
    distinct?: StatusScalarFieldEnum | StatusScalarFieldEnum[]
  }


  /**
   * Status findMany
   */
  export type StatusFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Status
     */
    select?: StatusSelect<ExtArgs> | null
    /**
     * Filter, which Statuses to fetch.
     */
    where?: StatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Statuses to fetch.
     */
    orderBy?: StatusOrderByWithRelationInput | StatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Statuses.
     */
    cursor?: StatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Statuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Statuses.
     */
    skip?: number
    distinct?: StatusScalarFieldEnum | StatusScalarFieldEnum[]
  }


  /**
   * Status create
   */
  export type StatusCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Status
     */
    select?: StatusSelect<ExtArgs> | null
    /**
     * The data needed to create a Status.
     */
    data: XOR<StatusCreateInput, StatusUncheckedCreateInput>
  }


  /**
   * Status createMany
   */
  export type StatusCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Statuses.
     */
    data: StatusCreateManyInput | StatusCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Status update
   */
  export type StatusUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Status
     */
    select?: StatusSelect<ExtArgs> | null
    /**
     * The data needed to update a Status.
     */
    data: XOR<StatusUpdateInput, StatusUncheckedUpdateInput>
    /**
     * Choose, which Status to update.
     */
    where: StatusWhereUniqueInput
  }


  /**
   * Status updateMany
   */
  export type StatusUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Statuses.
     */
    data: XOR<StatusUpdateManyMutationInput, StatusUncheckedUpdateManyInput>
    /**
     * Filter which Statuses to update
     */
    where?: StatusWhereInput
  }


  /**
   * Status upsert
   */
  export type StatusUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Status
     */
    select?: StatusSelect<ExtArgs> | null
    /**
     * The filter to search for the Status to update in case it exists.
     */
    where: StatusWhereUniqueInput
    /**
     * In case the Status found by the `where` argument doesn't exist, create a new Status with this data.
     */
    create: XOR<StatusCreateInput, StatusUncheckedCreateInput>
    /**
     * In case the Status was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StatusUpdateInput, StatusUncheckedUpdateInput>
  }


  /**
   * Status delete
   */
  export type StatusDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Status
     */
    select?: StatusSelect<ExtArgs> | null
    /**
     * Filter which Status to delete.
     */
    where: StatusWhereUniqueInput
  }


  /**
   * Status deleteMany
   */
  export type StatusDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Statuses to delete
     */
    where?: StatusWhereInput
  }


  /**
   * Status without action
   */
  export type StatusDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Status
     */
    select?: StatusSelect<ExtArgs> | null
  }



  /**
   * Model Weapons
   */

  export type AggregateWeapons = {
    _count: WeaponsCountAggregateOutputType | null
    _avg: WeaponsAvgAggregateOutputType | null
    _sum: WeaponsSumAggregateOutputType | null
    _min: WeaponsMinAggregateOutputType | null
    _max: WeaponsMaxAggregateOutputType | null
  }

  export type WeaponsAvgAggregateOutputType = {
    id: number | null
  }

  export type WeaponsSumAggregateOutputType = {
    id: number | null
  }

  export type WeaponsMinAggregateOutputType = {
    id: number | null
    icon: string | null
    weapon: string | null
  }

  export type WeaponsMaxAggregateOutputType = {
    id: number | null
    icon: string | null
    weapon: string | null
  }

  export type WeaponsCountAggregateOutputType = {
    id: number
    icon: number
    weapon: number
    _all: number
  }


  export type WeaponsAvgAggregateInputType = {
    id?: true
  }

  export type WeaponsSumAggregateInputType = {
    id?: true
  }

  export type WeaponsMinAggregateInputType = {
    id?: true
    icon?: true
    weapon?: true
  }

  export type WeaponsMaxAggregateInputType = {
    id?: true
    icon?: true
    weapon?: true
  }

  export type WeaponsCountAggregateInputType = {
    id?: true
    icon?: true
    weapon?: true
    _all?: true
  }

  export type WeaponsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Weapons to aggregate.
     */
    where?: WeaponsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Weapons to fetch.
     */
    orderBy?: WeaponsOrderByWithRelationInput | WeaponsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WeaponsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Weapons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Weapons.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Weapons
    **/
    _count?: true | WeaponsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WeaponsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WeaponsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WeaponsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WeaponsMaxAggregateInputType
  }

  export type GetWeaponsAggregateType<T extends WeaponsAggregateArgs> = {
        [P in keyof T & keyof AggregateWeapons]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWeapons[P]>
      : GetScalarType<T[P], AggregateWeapons[P]>
  }




  export type WeaponsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WeaponsWhereInput
    orderBy?: WeaponsOrderByWithAggregationInput | WeaponsOrderByWithAggregationInput[]
    by: WeaponsScalarFieldEnum[] | WeaponsScalarFieldEnum
    having?: WeaponsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WeaponsCountAggregateInputType | true
    _avg?: WeaponsAvgAggregateInputType
    _sum?: WeaponsSumAggregateInputType
    _min?: WeaponsMinAggregateInputType
    _max?: WeaponsMaxAggregateInputType
  }

  export type WeaponsGroupByOutputType = {
    id: number
    icon: string
    weapon: string
    _count: WeaponsCountAggregateOutputType | null
    _avg: WeaponsAvgAggregateOutputType | null
    _sum: WeaponsSumAggregateOutputType | null
    _min: WeaponsMinAggregateOutputType | null
    _max: WeaponsMaxAggregateOutputType | null
  }

  type GetWeaponsGroupByPayload<T extends WeaponsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WeaponsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WeaponsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WeaponsGroupByOutputType[P]>
            : GetScalarType<T[P], WeaponsGroupByOutputType[P]>
        }
      >
    >


  export type WeaponsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    icon?: boolean
    weapon?: boolean
  }, ExtArgs["result"]["weapons"]>

  export type WeaponsSelectScalar = {
    id?: boolean
    icon?: boolean
    weapon?: boolean
  }


  export type $WeaponsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Weapons"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      icon: string
      weapon: string
    }, ExtArgs["result"]["weapons"]>
    composites: {}
  }


  type WeaponsGetPayload<S extends boolean | null | undefined | WeaponsDefaultArgs> = $Result.GetResult<Prisma.$WeaponsPayload, S>

  type WeaponsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<WeaponsFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: WeaponsCountAggregateInputType | true
    }

  export interface WeaponsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Weapons'], meta: { name: 'Weapons' } }
    /**
     * Find zero or one Weapons that matches the filter.
     * @param {WeaponsFindUniqueArgs} args - Arguments to find a Weapons
     * @example
     * // Get one Weapons
     * const weapons = await prisma.weapons.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends WeaponsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, WeaponsFindUniqueArgs<ExtArgs>>
    ): Prisma__WeaponsClient<$Result.GetResult<Prisma.$WeaponsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Weapons that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {WeaponsFindUniqueOrThrowArgs} args - Arguments to find a Weapons
     * @example
     * // Get one Weapons
     * const weapons = await prisma.weapons.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends WeaponsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, WeaponsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__WeaponsClient<$Result.GetResult<Prisma.$WeaponsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Weapons that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeaponsFindFirstArgs} args - Arguments to find a Weapons
     * @example
     * // Get one Weapons
     * const weapons = await prisma.weapons.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends WeaponsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, WeaponsFindFirstArgs<ExtArgs>>
    ): Prisma__WeaponsClient<$Result.GetResult<Prisma.$WeaponsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Weapons that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeaponsFindFirstOrThrowArgs} args - Arguments to find a Weapons
     * @example
     * // Get one Weapons
     * const weapons = await prisma.weapons.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends WeaponsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, WeaponsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__WeaponsClient<$Result.GetResult<Prisma.$WeaponsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Weapons that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeaponsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Weapons
     * const weapons = await prisma.weapons.findMany()
     * 
     * // Get first 10 Weapons
     * const weapons = await prisma.weapons.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const weaponsWithIdOnly = await prisma.weapons.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends WeaponsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, WeaponsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WeaponsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Weapons.
     * @param {WeaponsCreateArgs} args - Arguments to create a Weapons.
     * @example
     * // Create one Weapons
     * const Weapons = await prisma.weapons.create({
     *   data: {
     *     // ... data to create a Weapons
     *   }
     * })
     * 
    **/
    create<T extends WeaponsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, WeaponsCreateArgs<ExtArgs>>
    ): Prisma__WeaponsClient<$Result.GetResult<Prisma.$WeaponsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Weapons.
     *     @param {WeaponsCreateManyArgs} args - Arguments to create many Weapons.
     *     @example
     *     // Create many Weapons
     *     const weapons = await prisma.weapons.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends WeaponsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, WeaponsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Weapons.
     * @param {WeaponsDeleteArgs} args - Arguments to delete one Weapons.
     * @example
     * // Delete one Weapons
     * const Weapons = await prisma.weapons.delete({
     *   where: {
     *     // ... filter to delete one Weapons
     *   }
     * })
     * 
    **/
    delete<T extends WeaponsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, WeaponsDeleteArgs<ExtArgs>>
    ): Prisma__WeaponsClient<$Result.GetResult<Prisma.$WeaponsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Weapons.
     * @param {WeaponsUpdateArgs} args - Arguments to update one Weapons.
     * @example
     * // Update one Weapons
     * const weapons = await prisma.weapons.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends WeaponsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, WeaponsUpdateArgs<ExtArgs>>
    ): Prisma__WeaponsClient<$Result.GetResult<Prisma.$WeaponsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Weapons.
     * @param {WeaponsDeleteManyArgs} args - Arguments to filter Weapons to delete.
     * @example
     * // Delete a few Weapons
     * const { count } = await prisma.weapons.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends WeaponsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, WeaponsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Weapons.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeaponsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Weapons
     * const weapons = await prisma.weapons.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends WeaponsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, WeaponsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Weapons.
     * @param {WeaponsUpsertArgs} args - Arguments to update or create a Weapons.
     * @example
     * // Update or create a Weapons
     * const weapons = await prisma.weapons.upsert({
     *   create: {
     *     // ... data to create a Weapons
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Weapons we want to update
     *   }
     * })
    **/
    upsert<T extends WeaponsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, WeaponsUpsertArgs<ExtArgs>>
    ): Prisma__WeaponsClient<$Result.GetResult<Prisma.$WeaponsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Weapons.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeaponsCountArgs} args - Arguments to filter Weapons to count.
     * @example
     * // Count the number of Weapons
     * const count = await prisma.weapons.count({
     *   where: {
     *     // ... the filter for the Weapons we want to count
     *   }
     * })
    **/
    count<T extends WeaponsCountArgs>(
      args?: Subset<T, WeaponsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WeaponsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Weapons.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeaponsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WeaponsAggregateArgs>(args: Subset<T, WeaponsAggregateArgs>): Prisma.PrismaPromise<GetWeaponsAggregateType<T>>

    /**
     * Group by Weapons.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeaponsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WeaponsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WeaponsGroupByArgs['orderBy'] }
        : { orderBy?: WeaponsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WeaponsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWeaponsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Weapons model
   */
  readonly fields: WeaponsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Weapons.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WeaponsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Weapons model
   */ 
  interface WeaponsFieldRefs {
    readonly id: FieldRef<"Weapons", 'Int'>
    readonly icon: FieldRef<"Weapons", 'String'>
    readonly weapon: FieldRef<"Weapons", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Weapons findUnique
   */
  export type WeaponsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Weapons
     */
    select?: WeaponsSelect<ExtArgs> | null
    /**
     * Filter, which Weapons to fetch.
     */
    where: WeaponsWhereUniqueInput
  }


  /**
   * Weapons findUniqueOrThrow
   */
  export type WeaponsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Weapons
     */
    select?: WeaponsSelect<ExtArgs> | null
    /**
     * Filter, which Weapons to fetch.
     */
    where: WeaponsWhereUniqueInput
  }


  /**
   * Weapons findFirst
   */
  export type WeaponsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Weapons
     */
    select?: WeaponsSelect<ExtArgs> | null
    /**
     * Filter, which Weapons to fetch.
     */
    where?: WeaponsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Weapons to fetch.
     */
    orderBy?: WeaponsOrderByWithRelationInput | WeaponsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Weapons.
     */
    cursor?: WeaponsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Weapons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Weapons.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Weapons.
     */
    distinct?: WeaponsScalarFieldEnum | WeaponsScalarFieldEnum[]
  }


  /**
   * Weapons findFirstOrThrow
   */
  export type WeaponsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Weapons
     */
    select?: WeaponsSelect<ExtArgs> | null
    /**
     * Filter, which Weapons to fetch.
     */
    where?: WeaponsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Weapons to fetch.
     */
    orderBy?: WeaponsOrderByWithRelationInput | WeaponsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Weapons.
     */
    cursor?: WeaponsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Weapons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Weapons.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Weapons.
     */
    distinct?: WeaponsScalarFieldEnum | WeaponsScalarFieldEnum[]
  }


  /**
   * Weapons findMany
   */
  export type WeaponsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Weapons
     */
    select?: WeaponsSelect<ExtArgs> | null
    /**
     * Filter, which Weapons to fetch.
     */
    where?: WeaponsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Weapons to fetch.
     */
    orderBy?: WeaponsOrderByWithRelationInput | WeaponsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Weapons.
     */
    cursor?: WeaponsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Weapons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Weapons.
     */
    skip?: number
    distinct?: WeaponsScalarFieldEnum | WeaponsScalarFieldEnum[]
  }


  /**
   * Weapons create
   */
  export type WeaponsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Weapons
     */
    select?: WeaponsSelect<ExtArgs> | null
    /**
     * The data needed to create a Weapons.
     */
    data: XOR<WeaponsCreateInput, WeaponsUncheckedCreateInput>
  }


  /**
   * Weapons createMany
   */
  export type WeaponsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Weapons.
     */
    data: WeaponsCreateManyInput | WeaponsCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Weapons update
   */
  export type WeaponsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Weapons
     */
    select?: WeaponsSelect<ExtArgs> | null
    /**
     * The data needed to update a Weapons.
     */
    data: XOR<WeaponsUpdateInput, WeaponsUncheckedUpdateInput>
    /**
     * Choose, which Weapons to update.
     */
    where: WeaponsWhereUniqueInput
  }


  /**
   * Weapons updateMany
   */
  export type WeaponsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Weapons.
     */
    data: XOR<WeaponsUpdateManyMutationInput, WeaponsUncheckedUpdateManyInput>
    /**
     * Filter which Weapons to update
     */
    where?: WeaponsWhereInput
  }


  /**
   * Weapons upsert
   */
  export type WeaponsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Weapons
     */
    select?: WeaponsSelect<ExtArgs> | null
    /**
     * The filter to search for the Weapons to update in case it exists.
     */
    where: WeaponsWhereUniqueInput
    /**
     * In case the Weapons found by the `where` argument doesn't exist, create a new Weapons with this data.
     */
    create: XOR<WeaponsCreateInput, WeaponsUncheckedCreateInput>
    /**
     * In case the Weapons was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WeaponsUpdateInput, WeaponsUncheckedUpdateInput>
  }


  /**
   * Weapons delete
   */
  export type WeaponsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Weapons
     */
    select?: WeaponsSelect<ExtArgs> | null
    /**
     * Filter which Weapons to delete.
     */
    where: WeaponsWhereUniqueInput
  }


  /**
   * Weapons deleteMany
   */
  export type WeaponsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Weapons to delete
     */
    where?: WeaponsWhereInput
  }


  /**
   * Weapons without action
   */
  export type WeaponsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Weapons
     */
    select?: WeaponsSelect<ExtArgs> | null
  }



  /**
   * Model code_profiles
   */

  export type AggregateCode_profiles = {
    _count: Code_profilesCountAggregateOutputType | null
    _avg: Code_profilesAvgAggregateOutputType | null
    _sum: Code_profilesSumAggregateOutputType | null
    _min: Code_profilesMinAggregateOutputType | null
    _max: Code_profilesMaxAggregateOutputType | null
  }

  export type Code_profilesAvgAggregateOutputType = {
    posts_numbers: number | null
  }

  export type Code_profilesSumAggregateOutputType = {
    posts_numbers: number | null
  }

  export type Code_profilesMinAggregateOutputType = {
    user_name: string | null
    url_profile: string | null
    name: string | null
    bio: string | null
    profile_link: string | null
    posts_numbers: number | null
  }

  export type Code_profilesMaxAggregateOutputType = {
    user_name: string | null
    url_profile: string | null
    name: string | null
    bio: string | null
    profile_link: string | null
    posts_numbers: number | null
  }

  export type Code_profilesCountAggregateOutputType = {
    user_name: number
    url_profile: number
    name: number
    bio: number
    profile_link: number
    posts_numbers: number
    _all: number
  }


  export type Code_profilesAvgAggregateInputType = {
    posts_numbers?: true
  }

  export type Code_profilesSumAggregateInputType = {
    posts_numbers?: true
  }

  export type Code_profilesMinAggregateInputType = {
    user_name?: true
    url_profile?: true
    name?: true
    bio?: true
    profile_link?: true
    posts_numbers?: true
  }

  export type Code_profilesMaxAggregateInputType = {
    user_name?: true
    url_profile?: true
    name?: true
    bio?: true
    profile_link?: true
    posts_numbers?: true
  }

  export type Code_profilesCountAggregateInputType = {
    user_name?: true
    url_profile?: true
    name?: true
    bio?: true
    profile_link?: true
    posts_numbers?: true
    _all?: true
  }

  export type Code_profilesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which code_profiles to aggregate.
     */
    where?: code_profilesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of code_profiles to fetch.
     */
    orderBy?: code_profilesOrderByWithRelationInput | code_profilesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: code_profilesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` code_profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` code_profiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned code_profiles
    **/
    _count?: true | Code_profilesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Code_profilesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Code_profilesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Code_profilesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Code_profilesMaxAggregateInputType
  }

  export type GetCode_profilesAggregateType<T extends Code_profilesAggregateArgs> = {
        [P in keyof T & keyof AggregateCode_profiles]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCode_profiles[P]>
      : GetScalarType<T[P], AggregateCode_profiles[P]>
  }




  export type code_profilesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: code_profilesWhereInput
    orderBy?: code_profilesOrderByWithAggregationInput | code_profilesOrderByWithAggregationInput[]
    by: Code_profilesScalarFieldEnum[] | Code_profilesScalarFieldEnum
    having?: code_profilesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Code_profilesCountAggregateInputType | true
    _avg?: Code_profilesAvgAggregateInputType
    _sum?: Code_profilesSumAggregateInputType
    _min?: Code_profilesMinAggregateInputType
    _max?: Code_profilesMaxAggregateInputType
  }

  export type Code_profilesGroupByOutputType = {
    user_name: string
    url_profile: string
    name: string
    bio: string
    profile_link: string
    posts_numbers: number
    _count: Code_profilesCountAggregateOutputType | null
    _avg: Code_profilesAvgAggregateOutputType | null
    _sum: Code_profilesSumAggregateOutputType | null
    _min: Code_profilesMinAggregateOutputType | null
    _max: Code_profilesMaxAggregateOutputType | null
  }

  type GetCode_profilesGroupByPayload<T extends code_profilesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Code_profilesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Code_profilesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Code_profilesGroupByOutputType[P]>
            : GetScalarType<T[P], Code_profilesGroupByOutputType[P]>
        }
      >
    >


  export type code_profilesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    user_name?: boolean
    url_profile?: boolean
    name?: boolean
    bio?: boolean
    profile_link?: boolean
    posts_numbers?: boolean
    posts?: boolean | code_profiles$postsArgs<ExtArgs>
    _count?: boolean | Code_profilesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["code_profiles"]>

  export type code_profilesSelectScalar = {
    user_name?: boolean
    url_profile?: boolean
    name?: boolean
    bio?: boolean
    profile_link?: boolean
    posts_numbers?: boolean
  }

  export type code_profilesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    posts?: boolean | code_profiles$postsArgs<ExtArgs>
    _count?: boolean | Code_profilesCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $code_profilesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "code_profiles"
    objects: {
      posts: Prisma.$postsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      user_name: string
      url_profile: string
      name: string
      bio: string
      profile_link: string
      posts_numbers: number
    }, ExtArgs["result"]["code_profiles"]>
    composites: {}
  }


  type code_profilesGetPayload<S extends boolean | null | undefined | code_profilesDefaultArgs> = $Result.GetResult<Prisma.$code_profilesPayload, S>

  type code_profilesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<code_profilesFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: Code_profilesCountAggregateInputType | true
    }

  export interface code_profilesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['code_profiles'], meta: { name: 'code_profiles' } }
    /**
     * Find zero or one Code_profiles that matches the filter.
     * @param {code_profilesFindUniqueArgs} args - Arguments to find a Code_profiles
     * @example
     * // Get one Code_profiles
     * const code_profiles = await prisma.code_profiles.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends code_profilesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, code_profilesFindUniqueArgs<ExtArgs>>
    ): Prisma__code_profilesClient<$Result.GetResult<Prisma.$code_profilesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Code_profiles that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {code_profilesFindUniqueOrThrowArgs} args - Arguments to find a Code_profiles
     * @example
     * // Get one Code_profiles
     * const code_profiles = await prisma.code_profiles.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends code_profilesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, code_profilesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__code_profilesClient<$Result.GetResult<Prisma.$code_profilesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Code_profiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {code_profilesFindFirstArgs} args - Arguments to find a Code_profiles
     * @example
     * // Get one Code_profiles
     * const code_profiles = await prisma.code_profiles.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends code_profilesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, code_profilesFindFirstArgs<ExtArgs>>
    ): Prisma__code_profilesClient<$Result.GetResult<Prisma.$code_profilesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Code_profiles that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {code_profilesFindFirstOrThrowArgs} args - Arguments to find a Code_profiles
     * @example
     * // Get one Code_profiles
     * const code_profiles = await prisma.code_profiles.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends code_profilesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, code_profilesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__code_profilesClient<$Result.GetResult<Prisma.$code_profilesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Code_profiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {code_profilesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Code_profiles
     * const code_profiles = await prisma.code_profiles.findMany()
     * 
     * // Get first 10 Code_profiles
     * const code_profiles = await prisma.code_profiles.findMany({ take: 10 })
     * 
     * // Only select the `user_name`
     * const code_profilesWithUser_nameOnly = await prisma.code_profiles.findMany({ select: { user_name: true } })
     * 
    **/
    findMany<T extends code_profilesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, code_profilesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$code_profilesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Code_profiles.
     * @param {code_profilesCreateArgs} args - Arguments to create a Code_profiles.
     * @example
     * // Create one Code_profiles
     * const Code_profiles = await prisma.code_profiles.create({
     *   data: {
     *     // ... data to create a Code_profiles
     *   }
     * })
     * 
    **/
    create<T extends code_profilesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, code_profilesCreateArgs<ExtArgs>>
    ): Prisma__code_profilesClient<$Result.GetResult<Prisma.$code_profilesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Code_profiles.
     *     @param {code_profilesCreateManyArgs} args - Arguments to create many Code_profiles.
     *     @example
     *     // Create many Code_profiles
     *     const code_profiles = await prisma.code_profiles.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends code_profilesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, code_profilesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Code_profiles.
     * @param {code_profilesDeleteArgs} args - Arguments to delete one Code_profiles.
     * @example
     * // Delete one Code_profiles
     * const Code_profiles = await prisma.code_profiles.delete({
     *   where: {
     *     // ... filter to delete one Code_profiles
     *   }
     * })
     * 
    **/
    delete<T extends code_profilesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, code_profilesDeleteArgs<ExtArgs>>
    ): Prisma__code_profilesClient<$Result.GetResult<Prisma.$code_profilesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Code_profiles.
     * @param {code_profilesUpdateArgs} args - Arguments to update one Code_profiles.
     * @example
     * // Update one Code_profiles
     * const code_profiles = await prisma.code_profiles.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends code_profilesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, code_profilesUpdateArgs<ExtArgs>>
    ): Prisma__code_profilesClient<$Result.GetResult<Prisma.$code_profilesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Code_profiles.
     * @param {code_profilesDeleteManyArgs} args - Arguments to filter Code_profiles to delete.
     * @example
     * // Delete a few Code_profiles
     * const { count } = await prisma.code_profiles.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends code_profilesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, code_profilesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Code_profiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {code_profilesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Code_profiles
     * const code_profiles = await prisma.code_profiles.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends code_profilesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, code_profilesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Code_profiles.
     * @param {code_profilesUpsertArgs} args - Arguments to update or create a Code_profiles.
     * @example
     * // Update or create a Code_profiles
     * const code_profiles = await prisma.code_profiles.upsert({
     *   create: {
     *     // ... data to create a Code_profiles
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Code_profiles we want to update
     *   }
     * })
    **/
    upsert<T extends code_profilesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, code_profilesUpsertArgs<ExtArgs>>
    ): Prisma__code_profilesClient<$Result.GetResult<Prisma.$code_profilesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Code_profiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {code_profilesCountArgs} args - Arguments to filter Code_profiles to count.
     * @example
     * // Count the number of Code_profiles
     * const count = await prisma.code_profiles.count({
     *   where: {
     *     // ... the filter for the Code_profiles we want to count
     *   }
     * })
    **/
    count<T extends code_profilesCountArgs>(
      args?: Subset<T, code_profilesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Code_profilesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Code_profiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Code_profilesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Code_profilesAggregateArgs>(args: Subset<T, Code_profilesAggregateArgs>): Prisma.PrismaPromise<GetCode_profilesAggregateType<T>>

    /**
     * Group by Code_profiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {code_profilesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends code_profilesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: code_profilesGroupByArgs['orderBy'] }
        : { orderBy?: code_profilesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, code_profilesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCode_profilesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the code_profiles model
   */
  readonly fields: code_profilesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for code_profiles.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__code_profilesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    posts<T extends code_profiles$postsArgs<ExtArgs> = {}>(args?: Subset<T, code_profiles$postsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$postsPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the code_profiles model
   */ 
  interface code_profilesFieldRefs {
    readonly user_name: FieldRef<"code_profiles", 'String'>
    readonly url_profile: FieldRef<"code_profiles", 'String'>
    readonly name: FieldRef<"code_profiles", 'String'>
    readonly bio: FieldRef<"code_profiles", 'String'>
    readonly profile_link: FieldRef<"code_profiles", 'String'>
    readonly posts_numbers: FieldRef<"code_profiles", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * code_profiles findUnique
   */
  export type code_profilesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the code_profiles
     */
    select?: code_profilesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: code_profilesInclude<ExtArgs> | null
    /**
     * Filter, which code_profiles to fetch.
     */
    where: code_profilesWhereUniqueInput
  }


  /**
   * code_profiles findUniqueOrThrow
   */
  export type code_profilesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the code_profiles
     */
    select?: code_profilesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: code_profilesInclude<ExtArgs> | null
    /**
     * Filter, which code_profiles to fetch.
     */
    where: code_profilesWhereUniqueInput
  }


  /**
   * code_profiles findFirst
   */
  export type code_profilesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the code_profiles
     */
    select?: code_profilesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: code_profilesInclude<ExtArgs> | null
    /**
     * Filter, which code_profiles to fetch.
     */
    where?: code_profilesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of code_profiles to fetch.
     */
    orderBy?: code_profilesOrderByWithRelationInput | code_profilesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for code_profiles.
     */
    cursor?: code_profilesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` code_profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` code_profiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of code_profiles.
     */
    distinct?: Code_profilesScalarFieldEnum | Code_profilesScalarFieldEnum[]
  }


  /**
   * code_profiles findFirstOrThrow
   */
  export type code_profilesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the code_profiles
     */
    select?: code_profilesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: code_profilesInclude<ExtArgs> | null
    /**
     * Filter, which code_profiles to fetch.
     */
    where?: code_profilesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of code_profiles to fetch.
     */
    orderBy?: code_profilesOrderByWithRelationInput | code_profilesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for code_profiles.
     */
    cursor?: code_profilesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` code_profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` code_profiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of code_profiles.
     */
    distinct?: Code_profilesScalarFieldEnum | Code_profilesScalarFieldEnum[]
  }


  /**
   * code_profiles findMany
   */
  export type code_profilesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the code_profiles
     */
    select?: code_profilesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: code_profilesInclude<ExtArgs> | null
    /**
     * Filter, which code_profiles to fetch.
     */
    where?: code_profilesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of code_profiles to fetch.
     */
    orderBy?: code_profilesOrderByWithRelationInput | code_profilesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing code_profiles.
     */
    cursor?: code_profilesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` code_profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` code_profiles.
     */
    skip?: number
    distinct?: Code_profilesScalarFieldEnum | Code_profilesScalarFieldEnum[]
  }


  /**
   * code_profiles create
   */
  export type code_profilesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the code_profiles
     */
    select?: code_profilesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: code_profilesInclude<ExtArgs> | null
    /**
     * The data needed to create a code_profiles.
     */
    data: XOR<code_profilesCreateInput, code_profilesUncheckedCreateInput>
  }


  /**
   * code_profiles createMany
   */
  export type code_profilesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many code_profiles.
     */
    data: code_profilesCreateManyInput | code_profilesCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * code_profiles update
   */
  export type code_profilesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the code_profiles
     */
    select?: code_profilesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: code_profilesInclude<ExtArgs> | null
    /**
     * The data needed to update a code_profiles.
     */
    data: XOR<code_profilesUpdateInput, code_profilesUncheckedUpdateInput>
    /**
     * Choose, which code_profiles to update.
     */
    where: code_profilesWhereUniqueInput
  }


  /**
   * code_profiles updateMany
   */
  export type code_profilesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update code_profiles.
     */
    data: XOR<code_profilesUpdateManyMutationInput, code_profilesUncheckedUpdateManyInput>
    /**
     * Filter which code_profiles to update
     */
    where?: code_profilesWhereInput
  }


  /**
   * code_profiles upsert
   */
  export type code_profilesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the code_profiles
     */
    select?: code_profilesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: code_profilesInclude<ExtArgs> | null
    /**
     * The filter to search for the code_profiles to update in case it exists.
     */
    where: code_profilesWhereUniqueInput
    /**
     * In case the code_profiles found by the `where` argument doesn't exist, create a new code_profiles with this data.
     */
    create: XOR<code_profilesCreateInput, code_profilesUncheckedCreateInput>
    /**
     * In case the code_profiles was found with the provided `where` argument, update it with this data.
     */
    update: XOR<code_profilesUpdateInput, code_profilesUncheckedUpdateInput>
  }


  /**
   * code_profiles delete
   */
  export type code_profilesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the code_profiles
     */
    select?: code_profilesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: code_profilesInclude<ExtArgs> | null
    /**
     * Filter which code_profiles to delete.
     */
    where: code_profilesWhereUniqueInput
  }


  /**
   * code_profiles deleteMany
   */
  export type code_profilesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which code_profiles to delete
     */
    where?: code_profilesWhereInput
  }


  /**
   * code_profiles.posts
   */
  export type code_profiles$postsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the posts
     */
    select?: postsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: postsInclude<ExtArgs> | null
    where?: postsWhereInput
    orderBy?: postsOrderByWithRelationInput | postsOrderByWithRelationInput[]
    cursor?: postsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PostsScalarFieldEnum | PostsScalarFieldEnum[]
  }


  /**
   * code_profiles without action
   */
  export type code_profilesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the code_profiles
     */
    select?: code_profilesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: code_profilesInclude<ExtArgs> | null
  }



  /**
   * Model game
   */

  export type AggregateGame = {
    _count: GameCountAggregateOutputType | null
    _avg: GameAvgAggregateOutputType | null
    _sum: GameSumAggregateOutputType | null
    _min: GameMinAggregateOutputType | null
    _max: GameMaxAggregateOutputType | null
  }

  export type GameAvgAggregateOutputType = {
    id: number | null
  }

  export type GameSumAggregateOutputType = {
    id: number | null
  }

  export type GameMinAggregateOutputType = {
    id: number | null
    name: string | null
    cover_url: string | null
    desc: string | null
    price: string | null
  }

  export type GameMaxAggregateOutputType = {
    id: number | null
    name: string | null
    cover_url: string | null
    desc: string | null
    price: string | null
  }

  export type GameCountAggregateOutputType = {
    id: number
    name: number
    cover_url: number
    desc: number
    price: number
    genders: number
    _all: number
  }


  export type GameAvgAggregateInputType = {
    id?: true
  }

  export type GameSumAggregateInputType = {
    id?: true
  }

  export type GameMinAggregateInputType = {
    id?: true
    name?: true
    cover_url?: true
    desc?: true
    price?: true
  }

  export type GameMaxAggregateInputType = {
    id?: true
    name?: true
    cover_url?: true
    desc?: true
    price?: true
  }

  export type GameCountAggregateInputType = {
    id?: true
    name?: true
    cover_url?: true
    desc?: true
    price?: true
    genders?: true
    _all?: true
  }

  export type GameAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which game to aggregate.
     */
    where?: gameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of games to fetch.
     */
    orderBy?: gameOrderByWithRelationInput | gameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: gameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` games from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` games.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned games
    **/
    _count?: true | GameCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GameAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GameSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GameMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GameMaxAggregateInputType
  }

  export type GetGameAggregateType<T extends GameAggregateArgs> = {
        [P in keyof T & keyof AggregateGame]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGame[P]>
      : GetScalarType<T[P], AggregateGame[P]>
  }




  export type gameGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: gameWhereInput
    orderBy?: gameOrderByWithAggregationInput | gameOrderByWithAggregationInput[]
    by: GameScalarFieldEnum[] | GameScalarFieldEnum
    having?: gameScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GameCountAggregateInputType | true
    _avg?: GameAvgAggregateInputType
    _sum?: GameSumAggregateInputType
    _min?: GameMinAggregateInputType
    _max?: GameMaxAggregateInputType
  }

  export type GameGroupByOutputType = {
    id: number
    name: string
    cover_url: string
    desc: string
    price: string
    genders: string[]
    _count: GameCountAggregateOutputType | null
    _avg: GameAvgAggregateOutputType | null
    _sum: GameSumAggregateOutputType | null
    _min: GameMinAggregateOutputType | null
    _max: GameMaxAggregateOutputType | null
  }

  type GetGameGroupByPayload<T extends gameGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GameGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GameGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GameGroupByOutputType[P]>
            : GetScalarType<T[P], GameGroupByOutputType[P]>
        }
      >
    >


  export type gameSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    cover_url?: boolean
    desc?: boolean
    price?: boolean
    genders?: boolean
  }, ExtArgs["result"]["game"]>

  export type gameSelectScalar = {
    id?: boolean
    name?: boolean
    cover_url?: boolean
    desc?: boolean
    price?: boolean
    genders?: boolean
  }


  export type $gamePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "game"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      cover_url: string
      desc: string
      price: string
      genders: string[]
    }, ExtArgs["result"]["game"]>
    composites: {}
  }


  type gameGetPayload<S extends boolean | null | undefined | gameDefaultArgs> = $Result.GetResult<Prisma.$gamePayload, S>

  type gameCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<gameFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: GameCountAggregateInputType | true
    }

  export interface gameDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['game'], meta: { name: 'game' } }
    /**
     * Find zero or one Game that matches the filter.
     * @param {gameFindUniqueArgs} args - Arguments to find a Game
     * @example
     * // Get one Game
     * const game = await prisma.game.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends gameFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, gameFindUniqueArgs<ExtArgs>>
    ): Prisma__gameClient<$Result.GetResult<Prisma.$gamePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Game that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {gameFindUniqueOrThrowArgs} args - Arguments to find a Game
     * @example
     * // Get one Game
     * const game = await prisma.game.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends gameFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, gameFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__gameClient<$Result.GetResult<Prisma.$gamePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Game that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {gameFindFirstArgs} args - Arguments to find a Game
     * @example
     * // Get one Game
     * const game = await prisma.game.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends gameFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, gameFindFirstArgs<ExtArgs>>
    ): Prisma__gameClient<$Result.GetResult<Prisma.$gamePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Game that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {gameFindFirstOrThrowArgs} args - Arguments to find a Game
     * @example
     * // Get one Game
     * const game = await prisma.game.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends gameFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, gameFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__gameClient<$Result.GetResult<Prisma.$gamePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Games that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {gameFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Games
     * const games = await prisma.game.findMany()
     * 
     * // Get first 10 Games
     * const games = await prisma.game.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const gameWithIdOnly = await prisma.game.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends gameFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, gameFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$gamePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Game.
     * @param {gameCreateArgs} args - Arguments to create a Game.
     * @example
     * // Create one Game
     * const Game = await prisma.game.create({
     *   data: {
     *     // ... data to create a Game
     *   }
     * })
     * 
    **/
    create<T extends gameCreateArgs<ExtArgs>>(
      args: SelectSubset<T, gameCreateArgs<ExtArgs>>
    ): Prisma__gameClient<$Result.GetResult<Prisma.$gamePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Games.
     *     @param {gameCreateManyArgs} args - Arguments to create many Games.
     *     @example
     *     // Create many Games
     *     const game = await prisma.game.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends gameCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, gameCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Game.
     * @param {gameDeleteArgs} args - Arguments to delete one Game.
     * @example
     * // Delete one Game
     * const Game = await prisma.game.delete({
     *   where: {
     *     // ... filter to delete one Game
     *   }
     * })
     * 
    **/
    delete<T extends gameDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, gameDeleteArgs<ExtArgs>>
    ): Prisma__gameClient<$Result.GetResult<Prisma.$gamePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Game.
     * @param {gameUpdateArgs} args - Arguments to update one Game.
     * @example
     * // Update one Game
     * const game = await prisma.game.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends gameUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, gameUpdateArgs<ExtArgs>>
    ): Prisma__gameClient<$Result.GetResult<Prisma.$gamePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Games.
     * @param {gameDeleteManyArgs} args - Arguments to filter Games to delete.
     * @example
     * // Delete a few Games
     * const { count } = await prisma.game.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends gameDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, gameDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Games.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {gameUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Games
     * const game = await prisma.game.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends gameUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, gameUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Game.
     * @param {gameUpsertArgs} args - Arguments to update or create a Game.
     * @example
     * // Update or create a Game
     * const game = await prisma.game.upsert({
     *   create: {
     *     // ... data to create a Game
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Game we want to update
     *   }
     * })
    **/
    upsert<T extends gameUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, gameUpsertArgs<ExtArgs>>
    ): Prisma__gameClient<$Result.GetResult<Prisma.$gamePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Games.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {gameCountArgs} args - Arguments to filter Games to count.
     * @example
     * // Count the number of Games
     * const count = await prisma.game.count({
     *   where: {
     *     // ... the filter for the Games we want to count
     *   }
     * })
    **/
    count<T extends gameCountArgs>(
      args?: Subset<T, gameCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GameCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Game.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GameAggregateArgs>(args: Subset<T, GameAggregateArgs>): Prisma.PrismaPromise<GetGameAggregateType<T>>

    /**
     * Group by Game.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {gameGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends gameGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: gameGroupByArgs['orderBy'] }
        : { orderBy?: gameGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, gameGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGameGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the game model
   */
  readonly fields: gameFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for game.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__gameClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the game model
   */ 
  interface gameFieldRefs {
    readonly id: FieldRef<"game", 'Int'>
    readonly name: FieldRef<"game", 'String'>
    readonly cover_url: FieldRef<"game", 'String'>
    readonly desc: FieldRef<"game", 'String'>
    readonly price: FieldRef<"game", 'String'>
    readonly genders: FieldRef<"game", 'String[]'>
  }
    

  // Custom InputTypes

  /**
   * game findUnique
   */
  export type gameFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the game
     */
    select?: gameSelect<ExtArgs> | null
    /**
     * Filter, which game to fetch.
     */
    where: gameWhereUniqueInput
  }


  /**
   * game findUniqueOrThrow
   */
  export type gameFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the game
     */
    select?: gameSelect<ExtArgs> | null
    /**
     * Filter, which game to fetch.
     */
    where: gameWhereUniqueInput
  }


  /**
   * game findFirst
   */
  export type gameFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the game
     */
    select?: gameSelect<ExtArgs> | null
    /**
     * Filter, which game to fetch.
     */
    where?: gameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of games to fetch.
     */
    orderBy?: gameOrderByWithRelationInput | gameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for games.
     */
    cursor?: gameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` games from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` games.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of games.
     */
    distinct?: GameScalarFieldEnum | GameScalarFieldEnum[]
  }


  /**
   * game findFirstOrThrow
   */
  export type gameFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the game
     */
    select?: gameSelect<ExtArgs> | null
    /**
     * Filter, which game to fetch.
     */
    where?: gameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of games to fetch.
     */
    orderBy?: gameOrderByWithRelationInput | gameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for games.
     */
    cursor?: gameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` games from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` games.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of games.
     */
    distinct?: GameScalarFieldEnum | GameScalarFieldEnum[]
  }


  /**
   * game findMany
   */
  export type gameFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the game
     */
    select?: gameSelect<ExtArgs> | null
    /**
     * Filter, which games to fetch.
     */
    where?: gameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of games to fetch.
     */
    orderBy?: gameOrderByWithRelationInput | gameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing games.
     */
    cursor?: gameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` games from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` games.
     */
    skip?: number
    distinct?: GameScalarFieldEnum | GameScalarFieldEnum[]
  }


  /**
   * game create
   */
  export type gameCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the game
     */
    select?: gameSelect<ExtArgs> | null
    /**
     * The data needed to create a game.
     */
    data: XOR<gameCreateInput, gameUncheckedCreateInput>
  }


  /**
   * game createMany
   */
  export type gameCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many games.
     */
    data: gameCreateManyInput | gameCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * game update
   */
  export type gameUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the game
     */
    select?: gameSelect<ExtArgs> | null
    /**
     * The data needed to update a game.
     */
    data: XOR<gameUpdateInput, gameUncheckedUpdateInput>
    /**
     * Choose, which game to update.
     */
    where: gameWhereUniqueInput
  }


  /**
   * game updateMany
   */
  export type gameUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update games.
     */
    data: XOR<gameUpdateManyMutationInput, gameUncheckedUpdateManyInput>
    /**
     * Filter which games to update
     */
    where?: gameWhereInput
  }


  /**
   * game upsert
   */
  export type gameUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the game
     */
    select?: gameSelect<ExtArgs> | null
    /**
     * The filter to search for the game to update in case it exists.
     */
    where: gameWhereUniqueInput
    /**
     * In case the game found by the `where` argument doesn't exist, create a new game with this data.
     */
    create: XOR<gameCreateInput, gameUncheckedCreateInput>
    /**
     * In case the game was found with the provided `where` argument, update it with this data.
     */
    update: XOR<gameUpdateInput, gameUncheckedUpdateInput>
  }


  /**
   * game delete
   */
  export type gameDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the game
     */
    select?: gameSelect<ExtArgs> | null
    /**
     * Filter which game to delete.
     */
    where: gameWhereUniqueInput
  }


  /**
   * game deleteMany
   */
  export type gameDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which games to delete
     */
    where?: gameWhereInput
  }


  /**
   * game without action
   */
  export type gameDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the game
     */
    select?: gameSelect<ExtArgs> | null
  }



  /**
   * Model posts
   */

  export type AggregatePosts = {
    _count: PostsCountAggregateOutputType | null
    _avg: PostsAvgAggregateOutputType | null
    _sum: PostsSumAggregateOutputType | null
    _min: PostsMinAggregateOutputType | null
    _max: PostsMaxAggregateOutputType | null
  }

  export type PostsAvgAggregateOutputType = {
    id: number | null
  }

  export type PostsSumAggregateOutputType = {
    id: number | null
  }

  export type PostsMinAggregateOutputType = {
    id: number | null
    url_cover: string | null
    title: string | null
    link: string | null
    code_profiles_id: string | null
  }

  export type PostsMaxAggregateOutputType = {
    id: number | null
    url_cover: string | null
    title: string | null
    link: string | null
    code_profiles_id: string | null
  }

  export type PostsCountAggregateOutputType = {
    id: number
    url_cover: number
    title: number
    link: number
    code_profiles_id: number
    _all: number
  }


  export type PostsAvgAggregateInputType = {
    id?: true
  }

  export type PostsSumAggregateInputType = {
    id?: true
  }

  export type PostsMinAggregateInputType = {
    id?: true
    url_cover?: true
    title?: true
    link?: true
    code_profiles_id?: true
  }

  export type PostsMaxAggregateInputType = {
    id?: true
    url_cover?: true
    title?: true
    link?: true
    code_profiles_id?: true
  }

  export type PostsCountAggregateInputType = {
    id?: true
    url_cover?: true
    title?: true
    link?: true
    code_profiles_id?: true
    _all?: true
  }

  export type PostsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which posts to aggregate.
     */
    where?: postsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of posts to fetch.
     */
    orderBy?: postsOrderByWithRelationInput | postsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: postsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` posts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` posts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned posts
    **/
    _count?: true | PostsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PostsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PostsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PostsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PostsMaxAggregateInputType
  }

  export type GetPostsAggregateType<T extends PostsAggregateArgs> = {
        [P in keyof T & keyof AggregatePosts]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePosts[P]>
      : GetScalarType<T[P], AggregatePosts[P]>
  }




  export type postsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: postsWhereInput
    orderBy?: postsOrderByWithAggregationInput | postsOrderByWithAggregationInput[]
    by: PostsScalarFieldEnum[] | PostsScalarFieldEnum
    having?: postsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PostsCountAggregateInputType | true
    _avg?: PostsAvgAggregateInputType
    _sum?: PostsSumAggregateInputType
    _min?: PostsMinAggregateInputType
    _max?: PostsMaxAggregateInputType
  }

  export type PostsGroupByOutputType = {
    id: number
    url_cover: string
    title: string
    link: string
    code_profiles_id: string | null
    _count: PostsCountAggregateOutputType | null
    _avg: PostsAvgAggregateOutputType | null
    _sum: PostsSumAggregateOutputType | null
    _min: PostsMinAggregateOutputType | null
    _max: PostsMaxAggregateOutputType | null
  }

  type GetPostsGroupByPayload<T extends postsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PostsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PostsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PostsGroupByOutputType[P]>
            : GetScalarType<T[P], PostsGroupByOutputType[P]>
        }
      >
    >


  export type postsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    url_cover?: boolean
    title?: boolean
    link?: boolean
    code_profiles_id?: boolean
    code_profiles?: boolean | posts$code_profilesArgs<ExtArgs>
  }, ExtArgs["result"]["posts"]>

  export type postsSelectScalar = {
    id?: boolean
    url_cover?: boolean
    title?: boolean
    link?: boolean
    code_profiles_id?: boolean
  }

  export type postsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    code_profiles?: boolean | posts$code_profilesArgs<ExtArgs>
  }


  export type $postsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "posts"
    objects: {
      code_profiles: Prisma.$code_profilesPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      url_cover: string
      title: string
      link: string
      code_profiles_id: string | null
    }, ExtArgs["result"]["posts"]>
    composites: {}
  }


  type postsGetPayload<S extends boolean | null | undefined | postsDefaultArgs> = $Result.GetResult<Prisma.$postsPayload, S>

  type postsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<postsFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: PostsCountAggregateInputType | true
    }

  export interface postsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['posts'], meta: { name: 'posts' } }
    /**
     * Find zero or one Posts that matches the filter.
     * @param {postsFindUniqueArgs} args - Arguments to find a Posts
     * @example
     * // Get one Posts
     * const posts = await prisma.posts.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends postsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, postsFindUniqueArgs<ExtArgs>>
    ): Prisma__postsClient<$Result.GetResult<Prisma.$postsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Posts that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {postsFindUniqueOrThrowArgs} args - Arguments to find a Posts
     * @example
     * // Get one Posts
     * const posts = await prisma.posts.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends postsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, postsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__postsClient<$Result.GetResult<Prisma.$postsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Posts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {postsFindFirstArgs} args - Arguments to find a Posts
     * @example
     * // Get one Posts
     * const posts = await prisma.posts.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends postsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, postsFindFirstArgs<ExtArgs>>
    ): Prisma__postsClient<$Result.GetResult<Prisma.$postsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Posts that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {postsFindFirstOrThrowArgs} args - Arguments to find a Posts
     * @example
     * // Get one Posts
     * const posts = await prisma.posts.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends postsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, postsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__postsClient<$Result.GetResult<Prisma.$postsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Posts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {postsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Posts
     * const posts = await prisma.posts.findMany()
     * 
     * // Get first 10 Posts
     * const posts = await prisma.posts.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const postsWithIdOnly = await prisma.posts.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends postsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, postsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$postsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Posts.
     * @param {postsCreateArgs} args - Arguments to create a Posts.
     * @example
     * // Create one Posts
     * const Posts = await prisma.posts.create({
     *   data: {
     *     // ... data to create a Posts
     *   }
     * })
     * 
    **/
    create<T extends postsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, postsCreateArgs<ExtArgs>>
    ): Prisma__postsClient<$Result.GetResult<Prisma.$postsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Posts.
     *     @param {postsCreateManyArgs} args - Arguments to create many Posts.
     *     @example
     *     // Create many Posts
     *     const posts = await prisma.posts.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends postsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, postsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Posts.
     * @param {postsDeleteArgs} args - Arguments to delete one Posts.
     * @example
     * // Delete one Posts
     * const Posts = await prisma.posts.delete({
     *   where: {
     *     // ... filter to delete one Posts
     *   }
     * })
     * 
    **/
    delete<T extends postsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, postsDeleteArgs<ExtArgs>>
    ): Prisma__postsClient<$Result.GetResult<Prisma.$postsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Posts.
     * @param {postsUpdateArgs} args - Arguments to update one Posts.
     * @example
     * // Update one Posts
     * const posts = await prisma.posts.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends postsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, postsUpdateArgs<ExtArgs>>
    ): Prisma__postsClient<$Result.GetResult<Prisma.$postsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Posts.
     * @param {postsDeleteManyArgs} args - Arguments to filter Posts to delete.
     * @example
     * // Delete a few Posts
     * const { count } = await prisma.posts.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends postsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, postsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Posts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {postsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Posts
     * const posts = await prisma.posts.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends postsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, postsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Posts.
     * @param {postsUpsertArgs} args - Arguments to update or create a Posts.
     * @example
     * // Update or create a Posts
     * const posts = await prisma.posts.upsert({
     *   create: {
     *     // ... data to create a Posts
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Posts we want to update
     *   }
     * })
    **/
    upsert<T extends postsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, postsUpsertArgs<ExtArgs>>
    ): Prisma__postsClient<$Result.GetResult<Prisma.$postsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Posts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {postsCountArgs} args - Arguments to filter Posts to count.
     * @example
     * // Count the number of Posts
     * const count = await prisma.posts.count({
     *   where: {
     *     // ... the filter for the Posts we want to count
     *   }
     * })
    **/
    count<T extends postsCountArgs>(
      args?: Subset<T, postsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PostsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Posts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PostsAggregateArgs>(args: Subset<T, PostsAggregateArgs>): Prisma.PrismaPromise<GetPostsAggregateType<T>>

    /**
     * Group by Posts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {postsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends postsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: postsGroupByArgs['orderBy'] }
        : { orderBy?: postsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, postsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPostsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the posts model
   */
  readonly fields: postsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for posts.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__postsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    code_profiles<T extends posts$code_profilesArgs<ExtArgs> = {}>(args?: Subset<T, posts$code_profilesArgs<ExtArgs>>): Prisma__code_profilesClient<$Result.GetResult<Prisma.$code_profilesPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the posts model
   */ 
  interface postsFieldRefs {
    readonly id: FieldRef<"posts", 'Int'>
    readonly url_cover: FieldRef<"posts", 'String'>
    readonly title: FieldRef<"posts", 'String'>
    readonly link: FieldRef<"posts", 'String'>
    readonly code_profiles_id: FieldRef<"posts", 'String'>
  }
    

  // Custom InputTypes

  /**
   * posts findUnique
   */
  export type postsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the posts
     */
    select?: postsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: postsInclude<ExtArgs> | null
    /**
     * Filter, which posts to fetch.
     */
    where: postsWhereUniqueInput
  }


  /**
   * posts findUniqueOrThrow
   */
  export type postsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the posts
     */
    select?: postsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: postsInclude<ExtArgs> | null
    /**
     * Filter, which posts to fetch.
     */
    where: postsWhereUniqueInput
  }


  /**
   * posts findFirst
   */
  export type postsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the posts
     */
    select?: postsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: postsInclude<ExtArgs> | null
    /**
     * Filter, which posts to fetch.
     */
    where?: postsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of posts to fetch.
     */
    orderBy?: postsOrderByWithRelationInput | postsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for posts.
     */
    cursor?: postsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` posts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` posts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of posts.
     */
    distinct?: PostsScalarFieldEnum | PostsScalarFieldEnum[]
  }


  /**
   * posts findFirstOrThrow
   */
  export type postsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the posts
     */
    select?: postsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: postsInclude<ExtArgs> | null
    /**
     * Filter, which posts to fetch.
     */
    where?: postsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of posts to fetch.
     */
    orderBy?: postsOrderByWithRelationInput | postsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for posts.
     */
    cursor?: postsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` posts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` posts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of posts.
     */
    distinct?: PostsScalarFieldEnum | PostsScalarFieldEnum[]
  }


  /**
   * posts findMany
   */
  export type postsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the posts
     */
    select?: postsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: postsInclude<ExtArgs> | null
    /**
     * Filter, which posts to fetch.
     */
    where?: postsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of posts to fetch.
     */
    orderBy?: postsOrderByWithRelationInput | postsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing posts.
     */
    cursor?: postsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` posts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` posts.
     */
    skip?: number
    distinct?: PostsScalarFieldEnum | PostsScalarFieldEnum[]
  }


  /**
   * posts create
   */
  export type postsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the posts
     */
    select?: postsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: postsInclude<ExtArgs> | null
    /**
     * The data needed to create a posts.
     */
    data: XOR<postsCreateInput, postsUncheckedCreateInput>
  }


  /**
   * posts createMany
   */
  export type postsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many posts.
     */
    data: postsCreateManyInput | postsCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * posts update
   */
  export type postsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the posts
     */
    select?: postsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: postsInclude<ExtArgs> | null
    /**
     * The data needed to update a posts.
     */
    data: XOR<postsUpdateInput, postsUncheckedUpdateInput>
    /**
     * Choose, which posts to update.
     */
    where: postsWhereUniqueInput
  }


  /**
   * posts updateMany
   */
  export type postsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update posts.
     */
    data: XOR<postsUpdateManyMutationInput, postsUncheckedUpdateManyInput>
    /**
     * Filter which posts to update
     */
    where?: postsWhereInput
  }


  /**
   * posts upsert
   */
  export type postsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the posts
     */
    select?: postsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: postsInclude<ExtArgs> | null
    /**
     * The filter to search for the posts to update in case it exists.
     */
    where: postsWhereUniqueInput
    /**
     * In case the posts found by the `where` argument doesn't exist, create a new posts with this data.
     */
    create: XOR<postsCreateInput, postsUncheckedCreateInput>
    /**
     * In case the posts was found with the provided `where` argument, update it with this data.
     */
    update: XOR<postsUpdateInput, postsUncheckedUpdateInput>
  }


  /**
   * posts delete
   */
  export type postsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the posts
     */
    select?: postsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: postsInclude<ExtArgs> | null
    /**
     * Filter which posts to delete.
     */
    where: postsWhereUniqueInput
  }


  /**
   * posts deleteMany
   */
  export type postsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which posts to delete
     */
    where?: postsWhereInput
  }


  /**
   * posts.code_profiles
   */
  export type posts$code_profilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the code_profiles
     */
    select?: code_profilesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: code_profilesInclude<ExtArgs> | null
    where?: code_profilesWhereInput
  }


  /**
   * posts without action
   */
  export type postsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the posts
     */
    select?: postsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: postsInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const LegendsScalarFieldEnum: {
    id: 'id',
    avatar: 'avatar',
    name: 'name',
    status_id: 'status_id',
    weapon_primary: 'weapon_primary',
    weapon_secondary: 'weapon_secondary',
    lore: 'lore',
    prince: 'prince'
  };

  export type LegendsScalarFieldEnum = (typeof LegendsScalarFieldEnum)[keyof typeof LegendsScalarFieldEnum]


  export const LoreScalarFieldEnum: {
    id: 'id',
    paragraphs: 'paragraphs'
  };

  export type LoreScalarFieldEnum = (typeof LoreScalarFieldEnum)[keyof typeof LoreScalarFieldEnum]


  export const StatusScalarFieldEnum: {
    id: 'id',
    force: 'force',
    dex: 'dex',
    def: 'def',
    spd: 'spd'
  };

  export type StatusScalarFieldEnum = (typeof StatusScalarFieldEnum)[keyof typeof StatusScalarFieldEnum]


  export const WeaponsScalarFieldEnum: {
    id: 'id',
    icon: 'icon',
    weapon: 'weapon'
  };

  export type WeaponsScalarFieldEnum = (typeof WeaponsScalarFieldEnum)[keyof typeof WeaponsScalarFieldEnum]


  export const Code_profilesScalarFieldEnum: {
    user_name: 'user_name',
    url_profile: 'url_profile',
    name: 'name',
    bio: 'bio',
    profile_link: 'profile_link',
    posts_numbers: 'posts_numbers'
  };

  export type Code_profilesScalarFieldEnum = (typeof Code_profilesScalarFieldEnum)[keyof typeof Code_profilesScalarFieldEnum]


  export const GameScalarFieldEnum: {
    id: 'id',
    name: 'name',
    cover_url: 'cover_url',
    desc: 'desc',
    price: 'price',
    genders: 'genders'
  };

  export type GameScalarFieldEnum = (typeof GameScalarFieldEnum)[keyof typeof GameScalarFieldEnum]


  export const PostsScalarFieldEnum: {
    id: 'id',
    url_cover: 'url_cover',
    title: 'title',
    link: 'link',
    code_profiles_id: 'code_profiles_id'
  };

  export type PostsScalarFieldEnum = (typeof PostsScalarFieldEnum)[keyof typeof PostsScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type LegendsWhereInput = {
    AND?: LegendsWhereInput | LegendsWhereInput[]
    OR?: LegendsWhereInput[]
    NOT?: LegendsWhereInput | LegendsWhereInput[]
    id?: IntFilter<"Legends"> | number
    avatar?: StringFilter<"Legends"> | string
    name?: StringFilter<"Legends"> | string
    status_id?: IntNullableFilter<"Legends"> | number | null
    weapon_primary?: IntNullableFilter<"Legends"> | number | null
    weapon_secondary?: IntNullableFilter<"Legends"> | number | null
    lore?: IntNullableFilter<"Legends"> | number | null
    prince?: FloatFilter<"Legends"> | number
  }

  export type LegendsOrderByWithRelationInput = {
    id?: SortOrder
    avatar?: SortOrder
    name?: SortOrder
    status_id?: SortOrderInput | SortOrder
    weapon_primary?: SortOrderInput | SortOrder
    weapon_secondary?: SortOrderInput | SortOrder
    lore?: SortOrderInput | SortOrder
    prince?: SortOrder
  }

  export type LegendsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    avatar?: string
    name?: string
    AND?: LegendsWhereInput | LegendsWhereInput[]
    OR?: LegendsWhereInput[]
    NOT?: LegendsWhereInput | LegendsWhereInput[]
    status_id?: IntNullableFilter<"Legends"> | number | null
    weapon_primary?: IntNullableFilter<"Legends"> | number | null
    weapon_secondary?: IntNullableFilter<"Legends"> | number | null
    lore?: IntNullableFilter<"Legends"> | number | null
    prince?: FloatFilter<"Legends"> | number
  }, "id" | "avatar" | "name">

  export type LegendsOrderByWithAggregationInput = {
    id?: SortOrder
    avatar?: SortOrder
    name?: SortOrder
    status_id?: SortOrderInput | SortOrder
    weapon_primary?: SortOrderInput | SortOrder
    weapon_secondary?: SortOrderInput | SortOrder
    lore?: SortOrderInput | SortOrder
    prince?: SortOrder
    _count?: LegendsCountOrderByAggregateInput
    _avg?: LegendsAvgOrderByAggregateInput
    _max?: LegendsMaxOrderByAggregateInput
    _min?: LegendsMinOrderByAggregateInput
    _sum?: LegendsSumOrderByAggregateInput
  }

  export type LegendsScalarWhereWithAggregatesInput = {
    AND?: LegendsScalarWhereWithAggregatesInput | LegendsScalarWhereWithAggregatesInput[]
    OR?: LegendsScalarWhereWithAggregatesInput[]
    NOT?: LegendsScalarWhereWithAggregatesInput | LegendsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Legends"> | number
    avatar?: StringWithAggregatesFilter<"Legends"> | string
    name?: StringWithAggregatesFilter<"Legends"> | string
    status_id?: IntNullableWithAggregatesFilter<"Legends"> | number | null
    weapon_primary?: IntNullableWithAggregatesFilter<"Legends"> | number | null
    weapon_secondary?: IntNullableWithAggregatesFilter<"Legends"> | number | null
    lore?: IntNullableWithAggregatesFilter<"Legends"> | number | null
    prince?: FloatWithAggregatesFilter<"Legends"> | number
  }

  export type LoreWhereInput = {
    AND?: LoreWhereInput | LoreWhereInput[]
    OR?: LoreWhereInput[]
    NOT?: LoreWhereInput | LoreWhereInput[]
    id?: IntFilter<"Lore"> | number
    paragraphs?: StringNullableListFilter<"Lore">
  }

  export type LoreOrderByWithRelationInput = {
    id?: SortOrder
    paragraphs?: SortOrder
  }

  export type LoreWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: LoreWhereInput | LoreWhereInput[]
    OR?: LoreWhereInput[]
    NOT?: LoreWhereInput | LoreWhereInput[]
    paragraphs?: StringNullableListFilter<"Lore">
  }, "id">

  export type LoreOrderByWithAggregationInput = {
    id?: SortOrder
    paragraphs?: SortOrder
    _count?: LoreCountOrderByAggregateInput
    _avg?: LoreAvgOrderByAggregateInput
    _max?: LoreMaxOrderByAggregateInput
    _min?: LoreMinOrderByAggregateInput
    _sum?: LoreSumOrderByAggregateInput
  }

  export type LoreScalarWhereWithAggregatesInput = {
    AND?: LoreScalarWhereWithAggregatesInput | LoreScalarWhereWithAggregatesInput[]
    OR?: LoreScalarWhereWithAggregatesInput[]
    NOT?: LoreScalarWhereWithAggregatesInput | LoreScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Lore"> | number
    paragraphs?: StringNullableListFilter<"Lore">
  }

  export type StatusWhereInput = {
    AND?: StatusWhereInput | StatusWhereInput[]
    OR?: StatusWhereInput[]
    NOT?: StatusWhereInput | StatusWhereInput[]
    id?: IntFilter<"Status"> | number
    force?: IntFilter<"Status"> | number
    dex?: IntFilter<"Status"> | number
    def?: IntFilter<"Status"> | number
    spd?: IntFilter<"Status"> | number
  }

  export type StatusOrderByWithRelationInput = {
    id?: SortOrder
    force?: SortOrder
    dex?: SortOrder
    def?: SortOrder
    spd?: SortOrder
  }

  export type StatusWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: StatusWhereInput | StatusWhereInput[]
    OR?: StatusWhereInput[]
    NOT?: StatusWhereInput | StatusWhereInput[]
    force?: IntFilter<"Status"> | number
    dex?: IntFilter<"Status"> | number
    def?: IntFilter<"Status"> | number
    spd?: IntFilter<"Status"> | number
  }, "id">

  export type StatusOrderByWithAggregationInput = {
    id?: SortOrder
    force?: SortOrder
    dex?: SortOrder
    def?: SortOrder
    spd?: SortOrder
    _count?: StatusCountOrderByAggregateInput
    _avg?: StatusAvgOrderByAggregateInput
    _max?: StatusMaxOrderByAggregateInput
    _min?: StatusMinOrderByAggregateInput
    _sum?: StatusSumOrderByAggregateInput
  }

  export type StatusScalarWhereWithAggregatesInput = {
    AND?: StatusScalarWhereWithAggregatesInput | StatusScalarWhereWithAggregatesInput[]
    OR?: StatusScalarWhereWithAggregatesInput[]
    NOT?: StatusScalarWhereWithAggregatesInput | StatusScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Status"> | number
    force?: IntWithAggregatesFilter<"Status"> | number
    dex?: IntWithAggregatesFilter<"Status"> | number
    def?: IntWithAggregatesFilter<"Status"> | number
    spd?: IntWithAggregatesFilter<"Status"> | number
  }

  export type WeaponsWhereInput = {
    AND?: WeaponsWhereInput | WeaponsWhereInput[]
    OR?: WeaponsWhereInput[]
    NOT?: WeaponsWhereInput | WeaponsWhereInput[]
    id?: IntFilter<"Weapons"> | number
    icon?: StringFilter<"Weapons"> | string
    weapon?: StringFilter<"Weapons"> | string
  }

  export type WeaponsOrderByWithRelationInput = {
    id?: SortOrder
    icon?: SortOrder
    weapon?: SortOrder
  }

  export type WeaponsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    icon?: string
    weapon?: string
    AND?: WeaponsWhereInput | WeaponsWhereInput[]
    OR?: WeaponsWhereInput[]
    NOT?: WeaponsWhereInput | WeaponsWhereInput[]
  }, "id" | "icon" | "weapon">

  export type WeaponsOrderByWithAggregationInput = {
    id?: SortOrder
    icon?: SortOrder
    weapon?: SortOrder
    _count?: WeaponsCountOrderByAggregateInput
    _avg?: WeaponsAvgOrderByAggregateInput
    _max?: WeaponsMaxOrderByAggregateInput
    _min?: WeaponsMinOrderByAggregateInput
    _sum?: WeaponsSumOrderByAggregateInput
  }

  export type WeaponsScalarWhereWithAggregatesInput = {
    AND?: WeaponsScalarWhereWithAggregatesInput | WeaponsScalarWhereWithAggregatesInput[]
    OR?: WeaponsScalarWhereWithAggregatesInput[]
    NOT?: WeaponsScalarWhereWithAggregatesInput | WeaponsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Weapons"> | number
    icon?: StringWithAggregatesFilter<"Weapons"> | string
    weapon?: StringWithAggregatesFilter<"Weapons"> | string
  }

  export type code_profilesWhereInput = {
    AND?: code_profilesWhereInput | code_profilesWhereInput[]
    OR?: code_profilesWhereInput[]
    NOT?: code_profilesWhereInput | code_profilesWhereInput[]
    user_name?: StringFilter<"code_profiles"> | string
    url_profile?: StringFilter<"code_profiles"> | string
    name?: StringFilter<"code_profiles"> | string
    bio?: StringFilter<"code_profiles"> | string
    profile_link?: StringFilter<"code_profiles"> | string
    posts_numbers?: IntFilter<"code_profiles"> | number
    posts?: PostsListRelationFilter
  }

  export type code_profilesOrderByWithRelationInput = {
    user_name?: SortOrder
    url_profile?: SortOrder
    name?: SortOrder
    bio?: SortOrder
    profile_link?: SortOrder
    posts_numbers?: SortOrder
    posts?: postsOrderByRelationAggregateInput
  }

  export type code_profilesWhereUniqueInput = Prisma.AtLeast<{
    user_name?: string
    AND?: code_profilesWhereInput | code_profilesWhereInput[]
    OR?: code_profilesWhereInput[]
    NOT?: code_profilesWhereInput | code_profilesWhereInput[]
    url_profile?: StringFilter<"code_profiles"> | string
    name?: StringFilter<"code_profiles"> | string
    bio?: StringFilter<"code_profiles"> | string
    profile_link?: StringFilter<"code_profiles"> | string
    posts_numbers?: IntFilter<"code_profiles"> | number
    posts?: PostsListRelationFilter
  }, "user_name">

  export type code_profilesOrderByWithAggregationInput = {
    user_name?: SortOrder
    url_profile?: SortOrder
    name?: SortOrder
    bio?: SortOrder
    profile_link?: SortOrder
    posts_numbers?: SortOrder
    _count?: code_profilesCountOrderByAggregateInput
    _avg?: code_profilesAvgOrderByAggregateInput
    _max?: code_profilesMaxOrderByAggregateInput
    _min?: code_profilesMinOrderByAggregateInput
    _sum?: code_profilesSumOrderByAggregateInput
  }

  export type code_profilesScalarWhereWithAggregatesInput = {
    AND?: code_profilesScalarWhereWithAggregatesInput | code_profilesScalarWhereWithAggregatesInput[]
    OR?: code_profilesScalarWhereWithAggregatesInput[]
    NOT?: code_profilesScalarWhereWithAggregatesInput | code_profilesScalarWhereWithAggregatesInput[]
    user_name?: StringWithAggregatesFilter<"code_profiles"> | string
    url_profile?: StringWithAggregatesFilter<"code_profiles"> | string
    name?: StringWithAggregatesFilter<"code_profiles"> | string
    bio?: StringWithAggregatesFilter<"code_profiles"> | string
    profile_link?: StringWithAggregatesFilter<"code_profiles"> | string
    posts_numbers?: IntWithAggregatesFilter<"code_profiles"> | number
  }

  export type gameWhereInput = {
    AND?: gameWhereInput | gameWhereInput[]
    OR?: gameWhereInput[]
    NOT?: gameWhereInput | gameWhereInput[]
    id?: IntFilter<"game"> | number
    name?: StringFilter<"game"> | string
    cover_url?: StringFilter<"game"> | string
    desc?: StringFilter<"game"> | string
    price?: StringFilter<"game"> | string
    genders?: StringNullableListFilter<"game">
  }

  export type gameOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    cover_url?: SortOrder
    desc?: SortOrder
    price?: SortOrder
    genders?: SortOrder
  }

  export type gameWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    cover_url?: string
    desc?: string
    AND?: gameWhereInput | gameWhereInput[]
    OR?: gameWhereInput[]
    NOT?: gameWhereInput | gameWhereInput[]
    price?: StringFilter<"game"> | string
    genders?: StringNullableListFilter<"game">
  }, "id" | "name" | "cover_url" | "desc">

  export type gameOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    cover_url?: SortOrder
    desc?: SortOrder
    price?: SortOrder
    genders?: SortOrder
    _count?: gameCountOrderByAggregateInput
    _avg?: gameAvgOrderByAggregateInput
    _max?: gameMaxOrderByAggregateInput
    _min?: gameMinOrderByAggregateInput
    _sum?: gameSumOrderByAggregateInput
  }

  export type gameScalarWhereWithAggregatesInput = {
    AND?: gameScalarWhereWithAggregatesInput | gameScalarWhereWithAggregatesInput[]
    OR?: gameScalarWhereWithAggregatesInput[]
    NOT?: gameScalarWhereWithAggregatesInput | gameScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"game"> | number
    name?: StringWithAggregatesFilter<"game"> | string
    cover_url?: StringWithAggregatesFilter<"game"> | string
    desc?: StringWithAggregatesFilter<"game"> | string
    price?: StringWithAggregatesFilter<"game"> | string
    genders?: StringNullableListFilter<"game">
  }

  export type postsWhereInput = {
    AND?: postsWhereInput | postsWhereInput[]
    OR?: postsWhereInput[]
    NOT?: postsWhereInput | postsWhereInput[]
    id?: IntFilter<"posts"> | number
    url_cover?: StringFilter<"posts"> | string
    title?: StringFilter<"posts"> | string
    link?: StringFilter<"posts"> | string
    code_profiles_id?: StringNullableFilter<"posts"> | string | null
    code_profiles?: XOR<Code_profilesNullableRelationFilter, code_profilesWhereInput> | null
  }

  export type postsOrderByWithRelationInput = {
    id?: SortOrder
    url_cover?: SortOrder
    title?: SortOrder
    link?: SortOrder
    code_profiles_id?: SortOrderInput | SortOrder
    code_profiles?: code_profilesOrderByWithRelationInput
  }

  export type postsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: postsWhereInput | postsWhereInput[]
    OR?: postsWhereInput[]
    NOT?: postsWhereInput | postsWhereInput[]
    url_cover?: StringFilter<"posts"> | string
    title?: StringFilter<"posts"> | string
    link?: StringFilter<"posts"> | string
    code_profiles_id?: StringNullableFilter<"posts"> | string | null
    code_profiles?: XOR<Code_profilesNullableRelationFilter, code_profilesWhereInput> | null
  }, "id">

  export type postsOrderByWithAggregationInput = {
    id?: SortOrder
    url_cover?: SortOrder
    title?: SortOrder
    link?: SortOrder
    code_profiles_id?: SortOrderInput | SortOrder
    _count?: postsCountOrderByAggregateInput
    _avg?: postsAvgOrderByAggregateInput
    _max?: postsMaxOrderByAggregateInput
    _min?: postsMinOrderByAggregateInput
    _sum?: postsSumOrderByAggregateInput
  }

  export type postsScalarWhereWithAggregatesInput = {
    AND?: postsScalarWhereWithAggregatesInput | postsScalarWhereWithAggregatesInput[]
    OR?: postsScalarWhereWithAggregatesInput[]
    NOT?: postsScalarWhereWithAggregatesInput | postsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"posts"> | number
    url_cover?: StringWithAggregatesFilter<"posts"> | string
    title?: StringWithAggregatesFilter<"posts"> | string
    link?: StringWithAggregatesFilter<"posts"> | string
    code_profiles_id?: StringNullableWithAggregatesFilter<"posts"> | string | null
  }

  export type LegendsCreateInput = {
    avatar: string
    name: string
    status_id?: number | null
    weapon_primary?: number | null
    weapon_secondary?: number | null
    lore?: number | null
    prince: number
  }

  export type LegendsUncheckedCreateInput = {
    id?: number
    avatar: string
    name: string
    status_id?: number | null
    weapon_primary?: number | null
    weapon_secondary?: number | null
    lore?: number | null
    prince: number
  }

  export type LegendsUpdateInput = {
    avatar?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status_id?: NullableIntFieldUpdateOperationsInput | number | null
    weapon_primary?: NullableIntFieldUpdateOperationsInput | number | null
    weapon_secondary?: NullableIntFieldUpdateOperationsInput | number | null
    lore?: NullableIntFieldUpdateOperationsInput | number | null
    prince?: FloatFieldUpdateOperationsInput | number
  }

  export type LegendsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    avatar?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status_id?: NullableIntFieldUpdateOperationsInput | number | null
    weapon_primary?: NullableIntFieldUpdateOperationsInput | number | null
    weapon_secondary?: NullableIntFieldUpdateOperationsInput | number | null
    lore?: NullableIntFieldUpdateOperationsInput | number | null
    prince?: FloatFieldUpdateOperationsInput | number
  }

  export type LegendsCreateManyInput = {
    id?: number
    avatar: string
    name: string
    status_id?: number | null
    weapon_primary?: number | null
    weapon_secondary?: number | null
    lore?: number | null
    prince: number
  }

  export type LegendsUpdateManyMutationInput = {
    avatar?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status_id?: NullableIntFieldUpdateOperationsInput | number | null
    weapon_primary?: NullableIntFieldUpdateOperationsInput | number | null
    weapon_secondary?: NullableIntFieldUpdateOperationsInput | number | null
    lore?: NullableIntFieldUpdateOperationsInput | number | null
    prince?: FloatFieldUpdateOperationsInput | number
  }

  export type LegendsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    avatar?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status_id?: NullableIntFieldUpdateOperationsInput | number | null
    weapon_primary?: NullableIntFieldUpdateOperationsInput | number | null
    weapon_secondary?: NullableIntFieldUpdateOperationsInput | number | null
    lore?: NullableIntFieldUpdateOperationsInput | number | null
    prince?: FloatFieldUpdateOperationsInput | number
  }

  export type LoreCreateInput = {
    paragraphs?: LoreCreateparagraphsInput | string[]
  }

  export type LoreUncheckedCreateInput = {
    id?: number
    paragraphs?: LoreCreateparagraphsInput | string[]
  }

  export type LoreUpdateInput = {
    paragraphs?: LoreUpdateparagraphsInput | string[]
  }

  export type LoreUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    paragraphs?: LoreUpdateparagraphsInput | string[]
  }

  export type LoreCreateManyInput = {
    id?: number
    paragraphs?: LoreCreateparagraphsInput | string[]
  }

  export type LoreUpdateManyMutationInput = {
    paragraphs?: LoreUpdateparagraphsInput | string[]
  }

  export type LoreUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    paragraphs?: LoreUpdateparagraphsInput | string[]
  }

  export type StatusCreateInput = {
    force: number
    dex: number
    def: number
    spd: number
  }

  export type StatusUncheckedCreateInput = {
    id?: number
    force: number
    dex: number
    def: number
    spd: number
  }

  export type StatusUpdateInput = {
    force?: IntFieldUpdateOperationsInput | number
    dex?: IntFieldUpdateOperationsInput | number
    def?: IntFieldUpdateOperationsInput | number
    spd?: IntFieldUpdateOperationsInput | number
  }

  export type StatusUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    force?: IntFieldUpdateOperationsInput | number
    dex?: IntFieldUpdateOperationsInput | number
    def?: IntFieldUpdateOperationsInput | number
    spd?: IntFieldUpdateOperationsInput | number
  }

  export type StatusCreateManyInput = {
    id?: number
    force: number
    dex: number
    def: number
    spd: number
  }

  export type StatusUpdateManyMutationInput = {
    force?: IntFieldUpdateOperationsInput | number
    dex?: IntFieldUpdateOperationsInput | number
    def?: IntFieldUpdateOperationsInput | number
    spd?: IntFieldUpdateOperationsInput | number
  }

  export type StatusUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    force?: IntFieldUpdateOperationsInput | number
    dex?: IntFieldUpdateOperationsInput | number
    def?: IntFieldUpdateOperationsInput | number
    spd?: IntFieldUpdateOperationsInput | number
  }

  export type WeaponsCreateInput = {
    icon: string
    weapon: string
  }

  export type WeaponsUncheckedCreateInput = {
    id?: number
    icon: string
    weapon: string
  }

  export type WeaponsUpdateInput = {
    icon?: StringFieldUpdateOperationsInput | string
    weapon?: StringFieldUpdateOperationsInput | string
  }

  export type WeaponsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    icon?: StringFieldUpdateOperationsInput | string
    weapon?: StringFieldUpdateOperationsInput | string
  }

  export type WeaponsCreateManyInput = {
    id?: number
    icon: string
    weapon: string
  }

  export type WeaponsUpdateManyMutationInput = {
    icon?: StringFieldUpdateOperationsInput | string
    weapon?: StringFieldUpdateOperationsInput | string
  }

  export type WeaponsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    icon?: StringFieldUpdateOperationsInput | string
    weapon?: StringFieldUpdateOperationsInput | string
  }

  export type code_profilesCreateInput = {
    user_name: string
    url_profile: string
    name: string
    bio: string
    profile_link: string
    posts_numbers: number
    posts?: postsCreateNestedManyWithoutCode_profilesInput
  }

  export type code_profilesUncheckedCreateInput = {
    user_name: string
    url_profile: string
    name: string
    bio: string
    profile_link: string
    posts_numbers: number
    posts?: postsUncheckedCreateNestedManyWithoutCode_profilesInput
  }

  export type code_profilesUpdateInput = {
    user_name?: StringFieldUpdateOperationsInput | string
    url_profile?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    bio?: StringFieldUpdateOperationsInput | string
    profile_link?: StringFieldUpdateOperationsInput | string
    posts_numbers?: IntFieldUpdateOperationsInput | number
    posts?: postsUpdateManyWithoutCode_profilesNestedInput
  }

  export type code_profilesUncheckedUpdateInput = {
    user_name?: StringFieldUpdateOperationsInput | string
    url_profile?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    bio?: StringFieldUpdateOperationsInput | string
    profile_link?: StringFieldUpdateOperationsInput | string
    posts_numbers?: IntFieldUpdateOperationsInput | number
    posts?: postsUncheckedUpdateManyWithoutCode_profilesNestedInput
  }

  export type code_profilesCreateManyInput = {
    user_name: string
    url_profile: string
    name: string
    bio: string
    profile_link: string
    posts_numbers: number
  }

  export type code_profilesUpdateManyMutationInput = {
    user_name?: StringFieldUpdateOperationsInput | string
    url_profile?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    bio?: StringFieldUpdateOperationsInput | string
    profile_link?: StringFieldUpdateOperationsInput | string
    posts_numbers?: IntFieldUpdateOperationsInput | number
  }

  export type code_profilesUncheckedUpdateManyInput = {
    user_name?: StringFieldUpdateOperationsInput | string
    url_profile?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    bio?: StringFieldUpdateOperationsInput | string
    profile_link?: StringFieldUpdateOperationsInput | string
    posts_numbers?: IntFieldUpdateOperationsInput | number
  }

  export type gameCreateInput = {
    name: string
    cover_url: string
    desc: string
    price: string
    genders?: gameCreategendersInput | string[]
  }

  export type gameUncheckedCreateInput = {
    id?: number
    name: string
    cover_url: string
    desc: string
    price: string
    genders?: gameCreategendersInput | string[]
  }

  export type gameUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    cover_url?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    price?: StringFieldUpdateOperationsInput | string
    genders?: gameUpdategendersInput | string[]
  }

  export type gameUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    cover_url?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    price?: StringFieldUpdateOperationsInput | string
    genders?: gameUpdategendersInput | string[]
  }

  export type gameCreateManyInput = {
    id?: number
    name: string
    cover_url: string
    desc: string
    price: string
    genders?: gameCreategendersInput | string[]
  }

  export type gameUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    cover_url?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    price?: StringFieldUpdateOperationsInput | string
    genders?: gameUpdategendersInput | string[]
  }

  export type gameUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    cover_url?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    price?: StringFieldUpdateOperationsInput | string
    genders?: gameUpdategendersInput | string[]
  }

  export type postsCreateInput = {
    url_cover: string
    title: string
    link: string
    code_profiles?: code_profilesCreateNestedOneWithoutPostsInput
  }

  export type postsUncheckedCreateInput = {
    id?: number
    url_cover: string
    title: string
    link: string
    code_profiles_id?: string | null
  }

  export type postsUpdateInput = {
    url_cover?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    code_profiles?: code_profilesUpdateOneWithoutPostsNestedInput
  }

  export type postsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    url_cover?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    code_profiles_id?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type postsCreateManyInput = {
    id?: number
    url_cover: string
    title: string
    link: string
    code_profiles_id?: string | null
  }

  export type postsUpdateManyMutationInput = {
    url_cover?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
  }

  export type postsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    url_cover?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    code_profiles_id?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type LegendsCountOrderByAggregateInput = {
    id?: SortOrder
    avatar?: SortOrder
    name?: SortOrder
    status_id?: SortOrder
    weapon_primary?: SortOrder
    weapon_secondary?: SortOrder
    lore?: SortOrder
    prince?: SortOrder
  }

  export type LegendsAvgOrderByAggregateInput = {
    id?: SortOrder
    status_id?: SortOrder
    weapon_primary?: SortOrder
    weapon_secondary?: SortOrder
    lore?: SortOrder
    prince?: SortOrder
  }

  export type LegendsMaxOrderByAggregateInput = {
    id?: SortOrder
    avatar?: SortOrder
    name?: SortOrder
    status_id?: SortOrder
    weapon_primary?: SortOrder
    weapon_secondary?: SortOrder
    lore?: SortOrder
    prince?: SortOrder
  }

  export type LegendsMinOrderByAggregateInput = {
    id?: SortOrder
    avatar?: SortOrder
    name?: SortOrder
    status_id?: SortOrder
    weapon_primary?: SortOrder
    weapon_secondary?: SortOrder
    lore?: SortOrder
    prince?: SortOrder
  }

  export type LegendsSumOrderByAggregateInput = {
    id?: SortOrder
    status_id?: SortOrder
    weapon_primary?: SortOrder
    weapon_secondary?: SortOrder
    lore?: SortOrder
    prince?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type LoreCountOrderByAggregateInput = {
    id?: SortOrder
    paragraphs?: SortOrder
  }

  export type LoreAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type LoreMaxOrderByAggregateInput = {
    id?: SortOrder
  }

  export type LoreMinOrderByAggregateInput = {
    id?: SortOrder
  }

  export type LoreSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StatusCountOrderByAggregateInput = {
    id?: SortOrder
    force?: SortOrder
    dex?: SortOrder
    def?: SortOrder
    spd?: SortOrder
  }

  export type StatusAvgOrderByAggregateInput = {
    id?: SortOrder
    force?: SortOrder
    dex?: SortOrder
    def?: SortOrder
    spd?: SortOrder
  }

  export type StatusMaxOrderByAggregateInput = {
    id?: SortOrder
    force?: SortOrder
    dex?: SortOrder
    def?: SortOrder
    spd?: SortOrder
  }

  export type StatusMinOrderByAggregateInput = {
    id?: SortOrder
    force?: SortOrder
    dex?: SortOrder
    def?: SortOrder
    spd?: SortOrder
  }

  export type StatusSumOrderByAggregateInput = {
    id?: SortOrder
    force?: SortOrder
    dex?: SortOrder
    def?: SortOrder
    spd?: SortOrder
  }

  export type WeaponsCountOrderByAggregateInput = {
    id?: SortOrder
    icon?: SortOrder
    weapon?: SortOrder
  }

  export type WeaponsAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type WeaponsMaxOrderByAggregateInput = {
    id?: SortOrder
    icon?: SortOrder
    weapon?: SortOrder
  }

  export type WeaponsMinOrderByAggregateInput = {
    id?: SortOrder
    icon?: SortOrder
    weapon?: SortOrder
  }

  export type WeaponsSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type PostsListRelationFilter = {
    every?: postsWhereInput
    some?: postsWhereInput
    none?: postsWhereInput
  }

  export type postsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type code_profilesCountOrderByAggregateInput = {
    user_name?: SortOrder
    url_profile?: SortOrder
    name?: SortOrder
    bio?: SortOrder
    profile_link?: SortOrder
    posts_numbers?: SortOrder
  }

  export type code_profilesAvgOrderByAggregateInput = {
    posts_numbers?: SortOrder
  }

  export type code_profilesMaxOrderByAggregateInput = {
    user_name?: SortOrder
    url_profile?: SortOrder
    name?: SortOrder
    bio?: SortOrder
    profile_link?: SortOrder
    posts_numbers?: SortOrder
  }

  export type code_profilesMinOrderByAggregateInput = {
    user_name?: SortOrder
    url_profile?: SortOrder
    name?: SortOrder
    bio?: SortOrder
    profile_link?: SortOrder
    posts_numbers?: SortOrder
  }

  export type code_profilesSumOrderByAggregateInput = {
    posts_numbers?: SortOrder
  }

  export type gameCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    cover_url?: SortOrder
    desc?: SortOrder
    price?: SortOrder
    genders?: SortOrder
  }

  export type gameAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type gameMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    cover_url?: SortOrder
    desc?: SortOrder
    price?: SortOrder
  }

  export type gameMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    cover_url?: SortOrder
    desc?: SortOrder
    price?: SortOrder
  }

  export type gameSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type Code_profilesNullableRelationFilter = {
    is?: code_profilesWhereInput | null
    isNot?: code_profilesWhereInput | null
  }

  export type postsCountOrderByAggregateInput = {
    id?: SortOrder
    url_cover?: SortOrder
    title?: SortOrder
    link?: SortOrder
    code_profiles_id?: SortOrder
  }

  export type postsAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type postsMaxOrderByAggregateInput = {
    id?: SortOrder
    url_cover?: SortOrder
    title?: SortOrder
    link?: SortOrder
    code_profiles_id?: SortOrder
  }

  export type postsMinOrderByAggregateInput = {
    id?: SortOrder
    url_cover?: SortOrder
    title?: SortOrder
    link?: SortOrder
    code_profiles_id?: SortOrder
  }

  export type postsSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type LoreCreateparagraphsInput = {
    set: string[]
  }

  export type LoreUpdateparagraphsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type postsCreateNestedManyWithoutCode_profilesInput = {
    create?: XOR<postsCreateWithoutCode_profilesInput, postsUncheckedCreateWithoutCode_profilesInput> | postsCreateWithoutCode_profilesInput[] | postsUncheckedCreateWithoutCode_profilesInput[]
    connectOrCreate?: postsCreateOrConnectWithoutCode_profilesInput | postsCreateOrConnectWithoutCode_profilesInput[]
    createMany?: postsCreateManyCode_profilesInputEnvelope
    connect?: postsWhereUniqueInput | postsWhereUniqueInput[]
  }

  export type postsUncheckedCreateNestedManyWithoutCode_profilesInput = {
    create?: XOR<postsCreateWithoutCode_profilesInput, postsUncheckedCreateWithoutCode_profilesInput> | postsCreateWithoutCode_profilesInput[] | postsUncheckedCreateWithoutCode_profilesInput[]
    connectOrCreate?: postsCreateOrConnectWithoutCode_profilesInput | postsCreateOrConnectWithoutCode_profilesInput[]
    createMany?: postsCreateManyCode_profilesInputEnvelope
    connect?: postsWhereUniqueInput | postsWhereUniqueInput[]
  }

  export type postsUpdateManyWithoutCode_profilesNestedInput = {
    create?: XOR<postsCreateWithoutCode_profilesInput, postsUncheckedCreateWithoutCode_profilesInput> | postsCreateWithoutCode_profilesInput[] | postsUncheckedCreateWithoutCode_profilesInput[]
    connectOrCreate?: postsCreateOrConnectWithoutCode_profilesInput | postsCreateOrConnectWithoutCode_profilesInput[]
    upsert?: postsUpsertWithWhereUniqueWithoutCode_profilesInput | postsUpsertWithWhereUniqueWithoutCode_profilesInput[]
    createMany?: postsCreateManyCode_profilesInputEnvelope
    set?: postsWhereUniqueInput | postsWhereUniqueInput[]
    disconnect?: postsWhereUniqueInput | postsWhereUniqueInput[]
    delete?: postsWhereUniqueInput | postsWhereUniqueInput[]
    connect?: postsWhereUniqueInput | postsWhereUniqueInput[]
    update?: postsUpdateWithWhereUniqueWithoutCode_profilesInput | postsUpdateWithWhereUniqueWithoutCode_profilesInput[]
    updateMany?: postsUpdateManyWithWhereWithoutCode_profilesInput | postsUpdateManyWithWhereWithoutCode_profilesInput[]
    deleteMany?: postsScalarWhereInput | postsScalarWhereInput[]
  }

  export type postsUncheckedUpdateManyWithoutCode_profilesNestedInput = {
    create?: XOR<postsCreateWithoutCode_profilesInput, postsUncheckedCreateWithoutCode_profilesInput> | postsCreateWithoutCode_profilesInput[] | postsUncheckedCreateWithoutCode_profilesInput[]
    connectOrCreate?: postsCreateOrConnectWithoutCode_profilesInput | postsCreateOrConnectWithoutCode_profilesInput[]
    upsert?: postsUpsertWithWhereUniqueWithoutCode_profilesInput | postsUpsertWithWhereUniqueWithoutCode_profilesInput[]
    createMany?: postsCreateManyCode_profilesInputEnvelope
    set?: postsWhereUniqueInput | postsWhereUniqueInput[]
    disconnect?: postsWhereUniqueInput | postsWhereUniqueInput[]
    delete?: postsWhereUniqueInput | postsWhereUniqueInput[]
    connect?: postsWhereUniqueInput | postsWhereUniqueInput[]
    update?: postsUpdateWithWhereUniqueWithoutCode_profilesInput | postsUpdateWithWhereUniqueWithoutCode_profilesInput[]
    updateMany?: postsUpdateManyWithWhereWithoutCode_profilesInput | postsUpdateManyWithWhereWithoutCode_profilesInput[]
    deleteMany?: postsScalarWhereInput | postsScalarWhereInput[]
  }

  export type gameCreategendersInput = {
    set: string[]
  }

  export type gameUpdategendersInput = {
    set?: string[]
    push?: string | string[]
  }

  export type code_profilesCreateNestedOneWithoutPostsInput = {
    create?: XOR<code_profilesCreateWithoutPostsInput, code_profilesUncheckedCreateWithoutPostsInput>
    connectOrCreate?: code_profilesCreateOrConnectWithoutPostsInput
    connect?: code_profilesWhereUniqueInput
  }

  export type code_profilesUpdateOneWithoutPostsNestedInput = {
    create?: XOR<code_profilesCreateWithoutPostsInput, code_profilesUncheckedCreateWithoutPostsInput>
    connectOrCreate?: code_profilesCreateOrConnectWithoutPostsInput
    upsert?: code_profilesUpsertWithoutPostsInput
    disconnect?: code_profilesWhereInput | boolean
    delete?: code_profilesWhereInput | boolean
    connect?: code_profilesWhereUniqueInput
    update?: XOR<XOR<code_profilesUpdateToOneWithWhereWithoutPostsInput, code_profilesUpdateWithoutPostsInput>, code_profilesUncheckedUpdateWithoutPostsInput>
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type postsCreateWithoutCode_profilesInput = {
    url_cover: string
    title: string
    link: string
  }

  export type postsUncheckedCreateWithoutCode_profilesInput = {
    id?: number
    url_cover: string
    title: string
    link: string
  }

  export type postsCreateOrConnectWithoutCode_profilesInput = {
    where: postsWhereUniqueInput
    create: XOR<postsCreateWithoutCode_profilesInput, postsUncheckedCreateWithoutCode_profilesInput>
  }

  export type postsCreateManyCode_profilesInputEnvelope = {
    data: postsCreateManyCode_profilesInput | postsCreateManyCode_profilesInput[]
    skipDuplicates?: boolean
  }

  export type postsUpsertWithWhereUniqueWithoutCode_profilesInput = {
    where: postsWhereUniqueInput
    update: XOR<postsUpdateWithoutCode_profilesInput, postsUncheckedUpdateWithoutCode_profilesInput>
    create: XOR<postsCreateWithoutCode_profilesInput, postsUncheckedCreateWithoutCode_profilesInput>
  }

  export type postsUpdateWithWhereUniqueWithoutCode_profilesInput = {
    where: postsWhereUniqueInput
    data: XOR<postsUpdateWithoutCode_profilesInput, postsUncheckedUpdateWithoutCode_profilesInput>
  }

  export type postsUpdateManyWithWhereWithoutCode_profilesInput = {
    where: postsScalarWhereInput
    data: XOR<postsUpdateManyMutationInput, postsUncheckedUpdateManyWithoutCode_profilesInput>
  }

  export type postsScalarWhereInput = {
    AND?: postsScalarWhereInput | postsScalarWhereInput[]
    OR?: postsScalarWhereInput[]
    NOT?: postsScalarWhereInput | postsScalarWhereInput[]
    id?: IntFilter<"posts"> | number
    url_cover?: StringFilter<"posts"> | string
    title?: StringFilter<"posts"> | string
    link?: StringFilter<"posts"> | string
    code_profiles_id?: StringNullableFilter<"posts"> | string | null
  }

  export type code_profilesCreateWithoutPostsInput = {
    user_name: string
    url_profile: string
    name: string
    bio: string
    profile_link: string
    posts_numbers: number
  }

  export type code_profilesUncheckedCreateWithoutPostsInput = {
    user_name: string
    url_profile: string
    name: string
    bio: string
    profile_link: string
    posts_numbers: number
  }

  export type code_profilesCreateOrConnectWithoutPostsInput = {
    where: code_profilesWhereUniqueInput
    create: XOR<code_profilesCreateWithoutPostsInput, code_profilesUncheckedCreateWithoutPostsInput>
  }

  export type code_profilesUpsertWithoutPostsInput = {
    update: XOR<code_profilesUpdateWithoutPostsInput, code_profilesUncheckedUpdateWithoutPostsInput>
    create: XOR<code_profilesCreateWithoutPostsInput, code_profilesUncheckedCreateWithoutPostsInput>
    where?: code_profilesWhereInput
  }

  export type code_profilesUpdateToOneWithWhereWithoutPostsInput = {
    where?: code_profilesWhereInput
    data: XOR<code_profilesUpdateWithoutPostsInput, code_profilesUncheckedUpdateWithoutPostsInput>
  }

  export type code_profilesUpdateWithoutPostsInput = {
    user_name?: StringFieldUpdateOperationsInput | string
    url_profile?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    bio?: StringFieldUpdateOperationsInput | string
    profile_link?: StringFieldUpdateOperationsInput | string
    posts_numbers?: IntFieldUpdateOperationsInput | number
  }

  export type code_profilesUncheckedUpdateWithoutPostsInput = {
    user_name?: StringFieldUpdateOperationsInput | string
    url_profile?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    bio?: StringFieldUpdateOperationsInput | string
    profile_link?: StringFieldUpdateOperationsInput | string
    posts_numbers?: IntFieldUpdateOperationsInput | number
  }

  export type postsCreateManyCode_profilesInput = {
    id?: number
    url_cover: string
    title: string
    link: string
  }

  export type postsUpdateWithoutCode_profilesInput = {
    url_cover?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
  }

  export type postsUncheckedUpdateWithoutCode_profilesInput = {
    id?: IntFieldUpdateOperationsInput | number
    url_cover?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
  }

  export type postsUncheckedUpdateManyWithoutCode_profilesInput = {
    id?: IntFieldUpdateOperationsInput | number
    url_cover?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use Code_profilesCountOutputTypeDefaultArgs instead
     */
    export type Code_profilesCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = Code_profilesCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LegendsDefaultArgs instead
     */
    export type LegendsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LegendsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LoreDefaultArgs instead
     */
    export type LoreArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LoreDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StatusDefaultArgs instead
     */
    export type StatusArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StatusDefaultArgs<ExtArgs>
    /**
     * @deprecated Use WeaponsDefaultArgs instead
     */
    export type WeaponsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = WeaponsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use code_profilesDefaultArgs instead
     */
    export type code_profilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = code_profilesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use gameDefaultArgs instead
     */
    export type gameArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = gameDefaultArgs<ExtArgs>
    /**
     * @deprecated Use postsDefaultArgs instead
     */
    export type postsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = postsDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}